
[gmc_convert_runtime(1)]
description = Converts time in seconds to human-readable format
args = runtime
definition = eval $runtime$=case(round($runtime$ / (3600*24) - 0.5) > 0, round($runtime$ / (3600*24)- 0.5)."d ".round(($runtime$ % (3600*24)) / 3600 - 0.5)."h ".round(($runtime$ % 3600) / 60 - 0.5)."min ".round($runtime$ % 60, 2)."s",round(($runtime$ % (3600*24)) / 3600 - 0.5) > 0,round(($runtime$ % (3600*24)) / 3600 - 0.5)."h ".round(($runtime$ % 3600) / 60 - 0.5)."min ".round($runtime$ % 60, 2)."s",round(($runtime$ % 3600) / 60 - 0.5) > 0, round(($runtime$ % 3600) / 60 - 0.5)."min ".round($runtime$ % 60, 2)."s", 1 = 1, round($runtime$ % 60, 2)."s")

# Gather Information Macros
[get_ko_type]
description = Retrieves Knowledge Object Type from summary index search name
definition = eval Knowledge_Object_Type = case ( \
    search_name="splunk_rest_admin_eventtypes_sh_summary_data", "Event types", \
    search_name="splunk_rest_admin_lookup_table_files_sh_summary_data", "Lookup table files", \
    search_name="splunk_rest_admin_transforms_lookup_sh_summary_data", "Lookup definitions", \
    search_name="splunk_rest_configs_conf_props_sh_summary_data", "Sourcetypes", \
    search_name="splunk_rest_data_macros_sh_summary_data", "Macros", \
    search_name="splunk_rest_data_models_sh_summary_data", "Data models", \
    search_name="splunk_rest_data_props_calcfields_sh_summary_data", "Calculated fields", \
    search_name="splunk_rest_data_props_extractions_sh_summary_data", "Field extractions", \
    search_name="splunk_rest_data_props_fieldaliases_sh_summary_data", "Field aliases", \
    search_name="splunk_rest_data_props_lookups_sh_summary_data", "Automatic lookups", \
    search_name="splunk_rest_data_transforms_extractions_sh_summary_data", "Field transformations", \
    search_name="splunk_rest_data_ui_views_sh_summary_data", "Dashboards", \
    search_name="splunk_rest_saved_searches_sh_summary_data", "Reports/Alerts", \
    true(), search_name)

[get_premium_app_job_class(1)]
description = Retrieves information about Scheduled Searches from the Saved Search Job Name
args = savedsearch_name
definition = eval job_class = case ( \
    match($savedsearch_name$, "-\s+Model\s+Gen$"), "MLTK Generating Searches",\
    match($savedsearch_name$, "-\s+Lookup\s+Gen$"), "Lookup Generating Searches",\
    match($savedsearch_name$, "-\s+Context\s+Gen$"), "XS Context Generating Searches",\
    match($savedsearch_name$, "-\s+Summary\s+Gen$"), "Summary Indexing Generating Searches",\
    match($savedsearch_name$, "-\s+Telemetry\s+Gen$"), "Telemetry Generating Searches",\
    match($savedsearch_name$, "-\s+Action\s+History$"), "Action History Searches",\
    match($savedsearch_name$, "-\s+Swimlane$"), "Swimlane Searches",\
    match($savedsearch_name$, "^ESCU\s+-\s+.*\s+-\s+MLTK"), "ESCU MLTK Generating Searches",\
    match($savedsearch_name$, "^ESCU"), "ESCU Searches",\
    match($savedsearch_name$, "-\s+Threat\s+Gen$"), "Threat Intelligence Generating Searches",\
    match($savedsearch_name$, "-\s+Rule$"), "Correlation Searches",\
    match($savedsearch_name$, "^Access\s+-\s+"), "Access Domain Searches",\
    match($savedsearch_name$, "^Audit\s+-\s+"), "Audit Domain Searches",\
    match($savedsearch_name$, "^Audit\s+-\s+"), "Audit Domain Searches",\
    match($savedsearch_name$, "^Assets?\s+-\s+"), "Assets Searches",\
    match($savedsearch_name$, "^CIM\s+-\s+"), "CIM Searches",\
    match($savedsearch_name$, "^Change\s+-\s+"), "Change Domain Searches",\
    match($savedsearch_name$, "^DMC\s+"), "Splunk Monitoring Console Searches",\
    match($savedsearch_name$, "^DNS\s+-\s+"), "DNS Domain Searches",\
    match($savedsearch_name$, "^Email\s+-\s+"), "Email Domain Searches",\
    match($savedsearch_name$, "^Endpoint\s+-\s+"), "Endpoint Domain Searches",\
    match($savedsearch_name$, "^IDS\s+-\s+"), "IDS Domain Searches",\
    match($savedsearch_name$, "^Malware\s+-\s+"), "Malware Domain Searches",\
    match($savedsearch_name$, "^Network\s+-\s+"), "Network Domain Searches",\
    match($savedsearch_name$, "^Risk\s+-\s+"), "Risk Searches",\
    match($savedsearch_name$, "^Traffic\s+-\s+"), "Traffic Domain Searches",\
    match($savedsearch_name$, "^Updates\s+-\s+"), "Updates Domain Searches",\
    match($savedsearch_name$, "^Vuln\s+-\s+"), "Vuln Domain Searches",\
    match($savedsearch_name$, "^Web\s+-\s+"), "Web Domain Searches",\
    match($savedsearch_name$, "^Whois\s+-\s+"), "Whois Searches",\
    match($savedsearch_name$, "^Identities\s+-\s+|Identity\s+-\s+"), "Identity Searches",\
    match($savedsearch_name$, "^Incident\s+Review\s+-\s+"), "Incident Review Searches",\
    match($savedsearch_name$, "^Notable\s+-\s+"), "Notable Events Searches",\
    match($savedsearch_name$, "^instrumentation"), "Splunk Instrumentation Searches",\
    match($savedsearch_name$, "^Notable\s+-\s+"), "Notable Events Searches",\
    match($savedsearch_name$, "^App\s+State\s+-\s+"), "App State Searches",\
    match($savedsearch_name$, "^Performance\s+-\s+"), "Performance Domain Searches",\
    match($savedsearch_name$, "^Inventory\s+-\s+"), "Inventory Domain Searches",\
    match($savedsearch_name$, "^Licensing\s+-\s+"), "Splunk Licensing Searches",\
    match($savedsearch_name$, "^Threat\s+Activity\s+-\s+|^Threats?\s+-\s+"), "Threat Activity Searches",\
    match($savedsearch_name$, "^Per-Panel\s+Filtering\s+-\s+"), "Per-Panel Filtering Searches",\
    match($savedsearch_name$, "^SSL\s+-\s+"), "SSL Searches",\
    match($savedsearch_name$, "^Sessions\s+-\s+"), "Sessions Searches",\
    match($savedsearch_name$, "^Suppressions\s+-\s+"), "Suppressions Searches",\
    match($savedsearch_name$, "^Utils\s+-\s+"), "Utils Searches",\
    match($savedsearch_name$, "^Modular\s+Actions\s+-\s+"), "Modular Actions Searches",\
    match($savedsearch_name$, "^seckit"), "SecKit Searches",\
    true(), "other")

[get_app_info(1)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by savedsearch only)
args = app
definition = eval app_type = case ( \
    match($app$, "_base$|_outputs$|_props$|_inputs$|_indexes$|_server$|TA-\w+_splunk|_limits$|_splunkcloud$|_deploymentclient$|_tuning$"), "Splunk Base Config Apps (Core)", \
    core=1 OR match($app$, "_cluster|SplunkForwarder|^search|splunk_metrics_workspace|SplunkLightForwarder|introspection_generator_addon|splunk_archiver|splunk_monitoring_console|launcher|splunk_gdi|user-prefs|alert_logevent|learned|splunk_httpinput|alert_webhook|legacy|splunk_instrumentation|appsbrowser|sample_app|splunk_internal_metrics|$app$work"), "Splunk Core Apps (Core)", \
    match($app$, "SplunkEnterpriseSecuritySuite|Splunk_DA-ESS_PCICompliance|^DA-ESS|^SA-\w+Protection|^SA-\w+Management|SA-UEBA|SA-ThreatIntelligence|SA-Utils|Splunk_SA_ExtremeSearch"), "Splunk Enterprise Security Apps", \
    match($app$, "DA-ITSI|itsi|SA-IndexCreation|SA-ITOA|SA-ITSI|SA-UserAccess|vmware_ta_itsi"), "Splunk IT Service Intelligence Apps", \
    match($app$, "SA-Hydra|SA-VMWIndex|Splunk_TA_esxilogs|Splunk_TA_vcenter|Splunk_TA_vmware|TA-VMW-FieldExtractions|SA-Threshold|^SA-VM|splunk_for_vmware"), "Splunk App for VMware (Core)", \
    match($app$, "SA-ExchangeIndex|^TA-Exchange|TA-SMTP-Reputation|TA-Windows-Exchange-IIS|splunk_app_microsoft_exchange"), "Splunk App for Microsoft Exchange (Core)", \
    match($app$, "splunk_app_aws|Splunk_TA_aws"), "Splunk App for AWS (Core)", \
    match($app$, "splunk_app_for_nix|Splunk_TA_nix|SA-nix"), "Splunk App for Unix (Core)", \
    match($app$, "splunk_app_infrastructure|Splunk_TA_Infrastructure"), "Splunk App for Infrastructure (Core)", \
    match($app$, "splunk_app_windows_infrastructure|Splunk_TA_windows"), "Splunk App for Windows Infrastructure (Core)", \
    match($app$, "splunk_app_servicenow|Splunk_TA_snow"), "Splunk App for ServiceNow (Core)", \
    match($app$, "skynet-rest|cloud_administration"), "Splunk Cloud Monitoring (Core)", \
    match($app$, "Splunk_Essentials"), "Splunk Essentials Apps (Core)", \
    match($app$, "^Splunk_ML|^Splunk_SA_Scientific"), "Splunk Machine Learning Apps (Core)", \
    match($app$, "global_monitoring_console|TA_gmc_config_files"), "Splunk Global Monitoring Console Apps (Core)", \
    match($app$, "Splunk_SA_CIM"), "Splunk Common Information Model (CIM) (Core)", \
    match($app$, "^Splunk_TA_"), "Splunk Technology Add-ons (Core)", \
    match($app$, "^Splunk_SA_"), "Splunk Solution Add-ons (Core)", \
    match($app$, "^splunk_|rwi_executive_dashboard|simple_xml_examples|^Splunk_Security|essential\d+-app|^splunk-dashboard"), "Splunk Apps (Core)", \
    match(details, "apps.splunk.com") AND match($app$, "_app$"), "Splunk Visualizations (Core)", \
    match($app$, "viz|semicircle_donut") AND match(details, "apps.splunk.com"), "Splunkbase Visualizations (Core)", \
    match($app$, "^TA_|^TA-") AND match(details, "apps.splunk.com"), "Splunkbase Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-") AND match(details, "apps.splunk.com"), "Splunkbase Solution Add-ons (Core)", \
    match(details, "apps.splunk.com"), "Splunkbase Apps & Add-ons (Core)", \
    match($app$, "^TA_|^TA-"), "Custom Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-"), "Custom Solution Add-ons (Core)", \
    true(), "Custom Apps & Add-ons (Core)" )

[get_app_info(2)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by savedsearch only)
args = Splunk_Instance,app
definition = lookup splunk_rest_apps_local_sh_kv_store_lookup Splunk_Instance As $Splunk_Instance$ title As $app$ OUTPUTNEW label core author version build check_for_updates visible sharing disabled configured show_in_nav state_change_requires_restart description details updated acl_perms_read acl_perms_write setup_view attribution_link update_appurl update_homepage \
| eval app_type = case ( \
    match($app$, "_base$|_outputs$|_props$|_inputs$|_indexes$|_server$|TA-\w+_splunk|_limits$|_splunkcloud$|_deploymentclient$|_tuning$"), "Splunk Base Config Apps (Core)", \
    core=1 OR match($app$, "_cluster|SplunkForwarder|^search|splunk_metrics_workspace|SplunkLightForwarder|introspection_generator_addon|splunk_archiver|splunk_monitoring_console|launcher|splunk_gdi|user-prefs|alert_logevent|learned|splunk_httpinput|alert_webhook|legacy|splunk_instrumentation|appsbrowser|sample_app|splunk_internal_metrics|$app$work"), "Splunk Core Apps (Core)", \
    match($app$, "SplunkEnterpriseSecuritySuite|Splunk_DA-ESS_PCICompliance|^DA-ESS|^SA-\w+Protection|^SA-\w+Management|SA-UEBA|SA-ThreatIntelligence|SA-Utils|Splunk_SA_ExtremeSearch"), "Splunk Enterprise Security Apps", \
    match($app$, "DA-ITSI|itsi|SA-IndexCreation|SA-ITOA|SA-ITSI|SA-UserAccess|vmware_ta_itsi"), "Splunk IT Service Intelligence Apps", \
    match($app$, "SA-Hydra|SA-VMWIndex|Splunk_TA_esxilogs|Splunk_TA_vcenter|Splunk_TA_vmware|TA-VMW-FieldExtractions|SA-Threshold|^SA-VM|splunk_for_vmware"), "Splunk App for VMware (Core)", \
    match($app$, "SA-ExchangeIndex|^TA-Exchange|TA-SMTP-Reputation|TA-Windows-Exchange-IIS|splunk_app_microsoft_exchange"), "Splunk App for Microsoft Exchange (Core)", \
    match($app$, "splunk_app_aws|Splunk_TA_aws"), "Splunk App for AWS (Core)", \
    match($app$, "splunk_app_for_nix|Splunk_TA_nix|SA-nix"), "Splunk App for Unix (Core)", \
    match($app$, "splunk_app_infrastructure|Splunk_TA_Infrastructure"), "Splunk App for Infrastructure (Core)", \
    match($app$, "splunk_app_windows_infrastructure|Splunk_TA_windows"), "Splunk App for Windows Infrastructure (Core)", \
    match($app$, "splunk_app_servicenow|Splunk_TA_snow"), "Splunk App for ServiceNow (Core)", \
    match($app$, "skynet-rest|cloud_administration"), "Splunk Cloud Monitoring (Core)", \
    match($app$, "Splunk_Essentials"), "Splunk Essentials Apps (Core)", \
    match($app$, "^Splunk_ML|^Splunk_SA_Scientific"), "Splunk Machine Learning Apps (Core)", \
    match($app$, "global_monitoring_console|TA_gmc_config_files"), "Splunk Global Monitoring Console Apps (Core)", \
    match($app$, "Splunk_SA_CIM"), "Splunk Common Information Model (CIM) (Core)", \
    match($app$, "^Splunk_TA_"), "Splunk Technology Add-ons (Core)", \
    match($app$, "^Splunk_SA_"), "Splunk Solution Add-ons (Core)", \
    match($app$, "^splunk_|rwi_executive_dashboard|simple_xml_examples|^Splunk_Security|essential\d+-app|^splunk-dashboard"), "Splunk Apps (Core)", \
    match(details, "apps.splunk.com") AND match($app$, "_app$"), "Splunk Visualizations (Core)", \
    match($app$, "viz|semicircle_donut") AND match(details, "apps.splunk.com"), "Splunkbase Visualizations (Core)", \
    match($app$, "^TA_|^TA-") AND match(details, "apps.splunk.com"), "Splunkbase Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-") AND match(details, "apps.splunk.com"), "Splunkbase Solution Add-ons (Core)", \
    match(details, "apps.splunk.com"), "Splunkbase Apps & Add-ons (Core)", \
    match($app$, "^TA_|^TA-"), "Custom Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-"), "Custom Solution Add-ons (Core)", \
    true(), "Custom Apps & Add-ons (Core)" ) \
| eval perc_vCPU_Used = numberOfVirtualCores * normalized_pct_cpu /100


[get_app_info(3)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by savedsearch only)
args = shcluster_label,Splunk_Instance,app
definition = lookup splunk_rest_apps_local_sh_kv_store_lookup shcluster_label As $shcluster_label$ Splunk_Instance as $Splunk_Instance$ title as $app$ OUTPUTNEW label core author version build check_for_updates visible sharing disabled configured show_in_nav state_change_requires_restart description details updated acl_perms_read acl_perms_write setup_view attribution_link update_appurl update_homepage \
| eval app_type = case ( \
    match($app$, "_base$|_outputs$|_props$|_inputs$|_indexes$|_server$|TA-\w+_splunk|_limits$|_splunkcloud$|_deploymentclient$|_tuning$"), "Splunk Base Config Apps (Core)", \
    core=1 OR match($app$, "_cluster|SplunkForwarder|^search|splunk_metrics_workspace|SplunkLightForwarder|introspection_generator_addon|splunk_archiver|splunk_monitoring_console|launcher|splunk_gdi|user-prefs|alert_logevent|learned|splunk_httpinput|alert_webhook|legacy|splunk_instrumentation|appsbrowser|sample_app|splunk_internal_metrics|$app$work"), "Splunk Core Apps (Core)", \
    match($app$, "SplunkEnterpriseSecuritySuite|Splunk_DA-ESS_PCICompliance|^DA-ESS|^SA-\w+Protection|^SA-\w+Management|SA-UEBA|SA-ThreatIntelligence|SA-Utils|Splunk_SA_ExtremeSearch"), "Splunk Enterprise Security Apps", \
    match($app$, "DA-ITSI|itsi|SA-IndexCreation|SA-ITOA|SA-ITSI|SA-UserAccess|vmware_ta_itsi"), "Splunk IT Service Intelligence Apps", \
    match($app$, "SA-Hydra|SA-VMWIndex|Splunk_TA_esxilogs|Splunk_TA_vcenter|Splunk_TA_vmware|TA-VMW-FieldExtractions|SA-Threshold|^SA-VM|splunk_for_vmware"), "Splunk App for VMware (Core)", \
    match($app$, "SA-ExchangeIndex|^TA-Exchange|TA-SMTP-Reputation|TA-Windows-Exchange-IIS|splunk_app_microsoft_exchange"), "Splunk App for Microsoft Exchange (Core)", \
    match($app$, "splunk_app_aws|Splunk_TA_aws"), "Splunk App for AWS (Core)", \
    match($app$, "splunk_app_for_nix|Splunk_TA_nix|SA-nix"), "Splunk App for Unix (Core)", \
    match($app$, "splunk_app_infrastructure|Splunk_TA_Infrastructure"), "Splunk App for Infrastructure (Core)", \
    match($app$, "splunk_app_windows_infrastructure|Splunk_TA_windows"), "Splunk App for Windows Infrastructure (Core)", \
    match($app$, "splunk_app_servicenow|Splunk_TA_snow"), "Splunk App for ServiceNow (Core)", \
    match($app$, "skynet-rest|cloud_administration"), "Splunk Cloud Monitoring (Core)", \
    match($app$, "Splunk_Essentials"), "Splunk Essentials Apps (Core)", \
    match($app$, "^Splunk_ML|^Splunk_SA_Scientific"), "Splunk Machine Learning Apps (Core)", \
    match($app$, "global_monitoring_console|TA_gmc_config_files"), "Splunk Global Monitoring Console Apps (Core)", \
    match($app$, "Splunk_SA_CIM"), "Splunk Common Information Model (CIM) (Core)", \
    match($app$, "^Splunk_TA_"), "Splunk Technology Add-ons (Core)", \
    match($app$, "^Splunk_SA_"), "Splunk Solution Add-ons (Core)", \
    match($app$, "^splunk_|rwi_executive_dashboard|simple_xml_examples|^Splunk_Security|essential\d+-app|^splunk-dashboard"), "Splunk Apps (Core)", \
    match(details, "apps.splunk.com") AND match($app$, "_app$"), "Splunk Visualizations (Core)", \
    match($app$, "viz|semicircle_donut") AND match(details, "apps.splunk.com"), "Splunkbase Visualizations (Core)", \
    match($app$, "^TA_|^TA-") AND match(details, "apps.splunk.com"), "Splunkbase Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-") AND match(details, "apps.splunk.com"), "Splunkbase Solution Add-ons (Core)", \
    match(details, "apps.splunk.com"), "Splunkbase Apps & Add-ons (Core)", \
    match($app$, "^TA_|^TA-"), "Custom Technology Add-ons (Core)", \
    match($app$, "^SA_|^SA-"), "Custom Solution Add-ons (Core)", \
    true(), "Custom Apps & Add-ons (Core)" ) \
| eval perc_vCPU_Used = numberOfVirtualCores * normalized_pct_cpu /100

[get_search_jobs_info(2)]
description = Retrieves information about all jobs running on every search head.  The Macro is powered by splunk_rest_search_jobs_sh_summary_tracker.  Example: | `get_search_jobs_info(shcluster_label,search_id_normalized)`
args = shcluster_label,search_id_normalized
definition = join $shcluster_label$ $search_id_normalized$ type=left \
    [| search index=`setup_summary_index` search_name="splunk_rest_search_jobs_sh_summary_tracker" \
    | stats \
        Latest(*) As * \
        by $shcluster_label$ $search_id_normalized$ \
    | eval status_org = "get_search_jobs_info" , status_search_jobs = Search_State\
    | fields $shcluster_label$ $search_id_normalized$ status_search_jobs status_org searchEarliestTime searchLatestTime ttl priority delegate diskUsage doneProgress eventAvailableCount eventCount isEventsPreviewEnabled isPreviewEnabled isRemoteTimeline meanPreviewPeriod numPreviews resultCount resultIsStreaming resultPreviewCount runDuration sampleRatio sampleSeed scanCount searchCanBeEventType runtime_auto_cancel runtime_auto_pause error_messages ] \
    | `gmc_byte2mb(diskUsage)`

[get_search_jobs_info(3)]
description = Retrieves information about all jobs running on every search head.  The Macro is powered by splunk_rest_search_jobs_sh_summary_tracker.  Example: | `get_search_jobs_info(shcluster_label,search_id_normalized,pid)`
args = shcluster_label,search_id_normalized,pid
definition = join $shcluster_label$ $search_id_normalized$ $pid$ type=left \
    [| search index=`setup_summary_index` search_name="splunk_rest_search_jobs_sh_summary_tracker" \
    | stats \
        Latest(*) As * \
        by $shcluster_label$ $search_id_normalized$ $pid$ \
    | eval status_org = "get_search_jobs_info" , status_search_jobs = Search_State\
    | fields $shcluster_label$ $search_id_normalized$ $pid$ status_search_jobs status_org searchEarliestTime searchLatestTime ttl priority delegate diskUsage doneProgress eventAvailableCount eventCount isEventsPreviewEnabled isPreviewEnabled isRemoteTimeline meanPreviewPeriod numPreviews resultCount resultIsStreaming resultPreviewCount runDuration sampleRatio sampleSeed scanCount searchCanBeEventType runtime_auto_cancel runtime_auto_pause error_messages ] \
    | `gmc_byte2mb(diskUsage)`

[get_audit_search_info(2)]
description = Retrieves Search Information from the GMC Audit Dataset.  Example: | `get_audit_search_info(shcluster_label,search_id_normalized)`
args = shcluster_label,search_id_normalized
definition = join $shcluster_label$ $search_id_normalized$ type=left \
    [| tstats SummariesOnly=TRUE Allow_OLD_Summaries=FALSE \
        Latest(_time) As _time \
        Latest(Search_Activity.Audit_Search.info1) As info \
        From DataModel=GMC \
        Where nodename=Search_Activity.Audit_Search \
        NOT Search_Activity.Audit_Search.info1 = "granted" \
        By host Search_Activity.Audit_Search.search_id1 \
    | `gmc_drop_dm_object_name(Search_Activity.Audit_Search)` \
    | rename search_id1 As search_id \
    | `get_normalized_search_id(search_id)` \
    | `get_shcluster_label(host)` \
    | eval info = case ( \
        info="completed", "Completed", \
        match(info,"^cancel"), "Canceled", \
        info="failed", "Failed", \
        true(), info) \
    | eval status_org = "get_audit_search_info" , status_audit = info\
    | fields shcluster_label search_id_normalized status_audit status_org]

[get_internal_search_info(2)]
description = Retrieves Search Information from the GMC Internal Dataset.  Example: | `| `get_internal_search_info(shcluster_label,search_id_normalized)`
args = shcluster_label,search_id_normalized
definition = join $shcluster_label$ $search_id_normalized$ type=left \
     [| tstats SummariesOnly=TRUE Allow_OLD_Summaries=FALSE \
        Latest(_time) As _time \
        Latest(Search_Activity.Internal_Scheduler.info2) As info \
        From DataModel=GMC \
        Where nodename=Search_Activity.Internal_Scheduler \
        index=_internal \
        By host Search_Activity.Internal_Scheduler.search_id2 \
    | `gmc_drop_dm_object_name(Search_Activity.Internal_Scheduler)` \
    | rename search_id2 As search_id \
    | `get_normalized_search_id(search_id)` \
    | `get_shcluster_label(host)` \
    | eval info = case ( \
        info="completed", "Completed", \
        match(info,"^cancel"), "Canceled", \
        info="deferred", "Deferred", \
        info="delegated_remote", "Delegated Remote", \
        info="delegated_remote_completion", "Delegated Remote Completion", \
        info="delegated_remote_error", "Delegated Remote Error", \
        info="skipped", "Skipped", \
        info="terminated", "Terminated", \
        info="queued", "Queued", \
        true(), info) \
    | eval status_org = "get_internal_search_info" , status_internal = info\
    | fields shcluster_label search_id_normalized status_internal status_org]

[get_saved_searches_info(1)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by savedsearch only)
args = Savedsearch_Name
definition = lookup splunk_rest_saved_searches_sh_kv_store_lookup savedsearch_name AS $Savedsearch_Name$ OUTPUTNEW savedsearch_type description author disabled is_scheduled sharing cron_schedule is_visible max_concurrent next_scheduled_time realtime_schedule run_n_times run_on_startup schedule_priority schedule_window scheduled_times updated allow_skew acl_perms_read acl_perms_write correlationsearch_enabled correlationsearch_label action_email email_message_alert email_message_report email_to indicator itsi_base_search_id itsi_kpi_id itsi_service_id itsi_eg itsi_eg_param_description itsi_eg_param_drilldown_search_earliest_offset itsi_eg_param_drilldown_search_latest_offset itsi_eg_param_drilldown_search_search itsi_eg_param_drilldown_search_title itsi_eg_param_drilldown_title itsi_eg_param_drilldown_uri itsi_eg_param_entity_lookup_field itsi_eg_param_event_identifier_fields itsi_eg_param_meta_data itsi_eg_param_owner itsi_eg_param_search_type itsi_eg_param_service_ids itsi_eg_param_severity itsi_eg_param_status itsi_eg_param_title kpi kpi_delta kpi_drilldown_uri kpi_group_0_name kpi_group_0_order kpi_group_1_name kpi_group_1_order kpi_invert kpi_subtitle kpi_threshold kpi_title kpi_value kpi_value_suffix makestreams_param_verbose nbtstat_param_verbose nslookup_param_verbose output_message output_message_param_fields output_message_param_msgid output_message_param_name output_message_param_purge outputtelemetry populate_lookup populate_lookup_dest script summary_index summary_index_name webhook webhook_param_url actions alert_comparator alert_condition alert_threshold alert_type alert_severity alert_suppress alert_suppress_fields alert_suppress_period alert_track auto_summarize auto_summarize_cron_schedule auto_summarize_dispatch_earliest_time auto_summarize_dispatch_latest_time auto_summarize_max_concurrent dispatch_auto_cancel dispatch_auto_pause dispatch_buckets dispatch_earliest_time dispatch_index_earliest dispatch_index_latest dispatch_indexedrealtime dispatch_indexedrealtimeoffset dispatch_latest_time dispatch_ttl dispatch_as savedsearch_search Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference\
\
| eval description=mvdedup(description), savedsearch_type=mvdedup(savedsearch_type), is_scheduled=mvdedup(is_scheduled), cron_schedule=mvdedup(cron_schedule), auto_summarize=mvdedup(auto_summarize), dispatch_earliest_time=mvdedup(dispatch_earliest_time), dispatch_latest_time=mvdedup(dispatch_latest_time), schedule_priority=mvdedup(schedule_priority), max_concurrent=mvdedup(max_concurrent), schedule_window=mvdedup(schedule_window), allow_skew=mvdedup(allow_skew), realtime_schedule=mvdedup(realtime_schedule), run_n_times=mvdedup(run_n_times) , run_on_startup=mvdedup(run_on_startup), Lookup_Reference=mvdedup(Lookup_Reference), Datamodel_Reference=mvdedup(Datamodel_Reference) , savedsearch_search=mvdedup(savedsearch_search), email_to=mvdedup(email_to)\
| fillnull value="0" disabled allow_skew schedule_window run_on_startup auto_summarize run_n_times is_scheduled summary_index\
| fillnull value="1" realtime_schedule max_concurrent is_visible auto_summarize_max_concurrent\
| fillnull value="default" schedule_priority\
| fillnull value="no-lookup-reference" Lookup_Reference \
| fillnull value="no-macro-reference" Macro_Reference \
| fillnull value="no-datamodel-reference" Datamodel_Reference \
| fillnull value="no-index-reference" Index_Reference \
| fillnull value="no-sourcetype-reference" Sourcetype_Reference \
| fillnull value="no-source-reference" Source_Reference \
| fillnull value="no-eventtype-reference" Eventtype_Reference \
| fillnull value="no-report-reference" Report_Reference \
| fillnull value="no-dashboard-reference" Dashboard_Reference\
| fillnull value="no-rest-reference" Rest_Reference

[normalize_search_status]
description = Normalize Search Status
definition = eval info = case ( \
        info="completed", "Completed", \
        info="failed", "Failed", \
        info="skipped", "Skipped", \
        match(info, "^terminate"), "Terminated", \
        info="queued", "Queued", \
        info="canceled", "Canceled", \
        info="deferred", "Deferred", \
        true(), info)
 
[get_saved_searches_info(2)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by SH & savedsearch)
args = shcluster_label,Savedsearch_Name
definition = eval $shcluster_label$=lower($shcluster_label$)\
| lookup splunk_rest_saved_searches_sh_kv_store_lookup shcluster_label AS $shcluster_label$ savedsearch_name AS $Savedsearch_Name$ OUTPUTNEW app savedsearch_type description author disabled is_scheduled sharing cron_schedule is_visible max_concurrent next_scheduled_time realtime_schedule run_n_times run_on_startup schedule_priority schedule_window scheduled_times updated allow_skew acl_perms_read acl_perms_write correlationsearch_enabled correlationsearch_label action_email email_message_alert email_message_report email_to indicator itsi_base_search_id itsi_kpi_id itsi_service_id itsi_eg itsi_eg_param_description itsi_eg_param_drilldown_search_earliest_offset itsi_eg_param_drilldown_search_latest_offset itsi_eg_param_drilldown_search_search itsi_eg_param_drilldown_search_title itsi_eg_param_drilldown_title itsi_eg_param_drilldown_uri itsi_eg_param_entity_lookup_field itsi_eg_param_event_identifier_fields itsi_eg_param_meta_data itsi_eg_param_owner itsi_eg_param_search_type itsi_eg_param_service_ids itsi_eg_param_severity itsi_eg_param_status itsi_eg_param_title kpi kpi_delta kpi_drilldown_uri kpi_group_0_name kpi_group_0_order kpi_group_1_name kpi_group_1_order kpi_invert kpi_subtitle kpi_threshold kpi_title kpi_value kpi_value_suffix makestreams_param_verbose nbtstat_param_verbose nslookup_param_verbose output_message output_message_param_fields output_message_param_msgid output_message_param_name output_message_param_purge outputtelemetry populate_lookup populate_lookup_dest script summary_index summary_index_name webhook webhook_param_url actions alert_comparator alert_condition alert_threshold alert_type alert_severity alert_suppress alert_suppress_fields alert_suppress_period alert_track auto_summarize auto_summarize_cron_schedule auto_summarize_dispatch_earliest_time auto_summarize_dispatch_latest_time auto_summarize_max_concurrent dispatch_auto_cancel dispatch_auto_pause dispatch_buckets dispatch_earliest_time dispatch_index_earliest dispatch_index_latest dispatch_indexedrealtime dispatch_indexedrealtimeoffset dispatch_latest_time dispatch_ttl dispatch_as savedsearch_search Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference\
\
| eval description=mvdedup(description), savedsearch_type=mvdedup(savedsearch_type), is_scheduled=mvdedup(is_scheduled), cron_schedule=mvdedup(cron_schedule), auto_summarize=mvdedup(auto_summarize), dispatch_earliest_time=mvdedup(dispatch_earliest_time), dispatch_latest_time=mvdedup(dispatch_latest_time), schedule_priority=mvdedup(schedule_priority), max_concurrent=mvdedup(max_concurrent), schedule_window=mvdedup(schedule_window), allow_skew=mvdedup(allow_skew), realtime_schedule=mvdedup(realtime_schedule), run_n_times=mvdedup(run_n_times) , run_on_startup=mvdedup(run_on_startup), Lookup_Reference=mvdedup(Lookup_Reference), Datamodel_Reference=mvdedup(Datamodel_Reference) , savedsearch_search=mvdedup(savedsearch_search), email_to=mvdedup(email_to)\
| fillnull value="0" disabled allow_skew schedule_window run_on_startup auto_summarize run_n_times is_scheduled summary_index\
| fillnull value="1" realtime_schedule max_concurrent is_visible auto_summarize_max_concurrent\
| fillnull value="default" schedule_priority\
| fillnull value="no-lookup-reference" Lookup_Reference\
| fillnull value="no-macro-reference" Macro_Reference\
| fillnull value="no-datamodel-reference" Datamodel_Reference\
| fillnull value="no-index-reference" Index_Reference\
| fillnull value="no-sourcetype-reference" Sourcetype_Reference\
| fillnull value="no-source-reference" Source_Reference\
| fillnull value="no-eventtype-reference" Eventtype_Reference\
| fillnull value="no-report-reference" Report_Reference\
| fillnull value="no-dashboard-reference" Dashboard_Reference\
| fillnull value="no-rest-reference" Rest_Reference

[get_saved_searches_info(3)]
description = Retrieves information about Scheduled Searches from the splunk_rest_saved_searches_sh_kv_store KV Store Lookup Table (match by SH, App & savedsearch)
args = shcluster_label,App,Savedsearch_Name
definition = eval $shcluster_label$=lower($shcluster_label$)\
| lookup splunk_rest_saved_searches_sh_kv_store_lookup shcluster_label AS $shcluster_label$ app AS $App$ savedsearch_name AS $Savedsearch_Name$ OUTPUTNEW savedsearch_type description author disabled is_scheduled sharing cron_schedule is_visible max_concurrent next_scheduled_time realtime_schedule run_n_times run_on_startup schedule_priority schedule_window scheduled_times updated allow_skew acl_perms_read acl_perms_write correlationsearch_enabled correlationsearch_label action_email email_message_alert email_message_report email_to indicator itsi_base_search_id itsi_kpi_id itsi_service_id itsi_eg itsi_eg_param_description itsi_eg_param_drilldown_search_earliest_offset itsi_eg_param_drilldown_search_latest_offset itsi_eg_param_drilldown_search_search itsi_eg_param_drilldown_search_title itsi_eg_param_drilldown_title itsi_eg_param_drilldown_uri itsi_eg_param_entity_lookup_field itsi_eg_param_event_identifier_fields itsi_eg_param_meta_data itsi_eg_param_owner itsi_eg_param_search_type itsi_eg_param_service_ids itsi_eg_param_severity itsi_eg_param_status itsi_eg_param_title kpi kpi_delta kpi_drilldown_uri kpi_group_0_name kpi_group_0_order kpi_group_1_name kpi_group_1_order kpi_invert kpi_subtitle kpi_threshold kpi_title kpi_value kpi_value_suffix makestreams_param_verbose nbtstat_param_verbose nslookup_param_verbose output_message output_message_param_fields output_message_param_msgid output_message_param_name output_message_param_purge outputtelemetry populate_lookup populate_lookup_dest script summary_index summary_index_name webhook webhook_param_url actions alert_comparator alert_condition alert_threshold alert_type alert_severity alert_suppress alert_suppress_fields alert_suppress_period alert_track auto_summarize auto_summarize_cron_schedule auto_summarize_dispatch_earliest_time auto_summarize_dispatch_latest_time auto_summarize_max_concurrent dispatch_auto_cancel dispatch_auto_pause dispatch_buckets dispatch_earliest_time dispatch_index_earliest dispatch_index_latest dispatch_indexedrealtime dispatch_indexedrealtimeoffset dispatch_latest_time dispatch_ttl dispatch_as savedsearch_search Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference\
\
| eval description=mvdedup(description), savedsearch_type=mvdedup(savedsearch_type), is_scheduled=mvdedup(is_scheduled), cron_schedule=mvdedup(cron_schedule), auto_summarize=mvdedup(auto_summarize), dispatch_earliest_time=mvdedup(dispatch_earliest_time), dispatch_latest_time=mvdedup(dispatch_latest_time), schedule_priority=mvdedup(schedule_priority), max_concurrent=mvdedup(max_concurrent), schedule_window=mvdedup(schedule_window), allow_skew=mvdedup(allow_skew), realtime_schedule=mvdedup(realtime_schedule), run_n_times=mvdedup(run_n_times) , run_on_startup=mvdedup(run_on_startup), Lookup_Reference=mvdedup(Lookup_Reference), Datamodel_Reference=mvdedup(Datamodel_Reference) , savedsearch_search=mvdedup(savedsearch_search), email_to=mvdedup(email_to)\
| fillnull value="0" disabled allow_skew schedule_window run_on_startup auto_summarize run_n_times is_scheduled summary_index\
| fillnull value="1" realtime_schedule max_concurrent is_visible auto_summarize_max_concurrent\
| fillnull value="default" schedule_priority\
| fillnull value="no-lookup-reference" Lookup_Reference\
| fillnull value="no-macro-reference" Macro_Reference\
| fillnull value="no-datamodel-reference" Datamodel_Reference\
| fillnull value="no-index-reference" Index_Reference\
| fillnull value="no-sourcetype-reference" Sourcetype_Reference\
| fillnull value="no-source-reference" Source_Reference\
| fillnull value="no-eventtype-reference" Eventtype_Reference\
| fillnull value="no-report-reference" Report_Reference\
| fillnull value="no-dashboard-reference" Dashboard_Reference\
| fillnull value="no-rest-reference" Rest_Reference

[get_saved_searches_usage(2)]
description = Retrieves Usage information from the Scheduled Searches tracking KV Store about Reports/Alerts (match by App & savedsearch)
args = app,Savedsearch_Name
definition = lookup splunk_index_internal_scheduler_jobs_tracker_sh_kv_store_lookup App AS $app$ Savedsearch_Name AS $Savedsearch_Name$ OUTPUTNEW User Scheduled_Time Priority Dispatch_Time Window_Time Earliest_Access Latest_Access Run_Time Result_Count\
\
| eval Days_Latest_Access = round((now() - Latest_Access) / 86400 , 0) \
\
| eval Days_Latest_Access=if(((Days_Latest_Access == "") OR isnull(Days_Latest_Access)),"9999999",Days_Latest_Access)\
\
| `strftime_format(Scheduled_Time)` \
| `strftime_format(Dispatch_Time)` \
| `strftime_format(Earliest_Access)`\
| `strftime_format(Latest_Access)`

[get_saved_searches_usage(3)]
description = Retrieves Usage information from the Scheduled Searches tracking KV Store about Reports/Alerts (match by SH, App & savedsearch)
args = shcluster_label,app,Savedsearch_Name
definition = lookup splunk_index_internal_scheduler_jobs_tracker_sh_kv_store_lookup shcluster_label AS $shcluster_label$ App AS $app$ Savedsearch_Name AS $Savedsearch_Name$ OUTPUTNEW User Scheduled_Time Priority Dispatch_Time Window_Time Earliest_Access Latest_Access Run_Time Result_Count\
\
| eval Days_Latest_Access = round((now() - Latest_Access) / 86400 , 0) \
\
| eval Days_Latest_Access=if(((Days_Latest_Access == "") OR isnull(Days_Latest_Access)),"9999999",Days_Latest_Access)\
\
| `strftime_format(Scheduled_Time)`\
| `strftime_format(Dispatch_Time)`\
| `strftime_format(Earliest_Access)`\
| `strftime_format(Latest_Access)`

[get_dashboards_info(1)]
description = Retrieves information about Dashboards from the splunk_rest_data_ui_views_sh_kv_store_lookup KV Store Lookup Table (match by Dashboard Name only)
args = Dashboard_Name
definition = lookup splunk_rest_data_ui_views_sh_kv_store_lookup title AS $Dashboard_Name$ OUTPUTNEW app sharing title label panel_title num_panels description type dashboard_size author location updated time_range Report_Reference Dashboard_Reference Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference search BaseSearch acl_perms_read acl_perms_write auto_refresh_delay submitButton autoRun is_time_selector

[get_dashboards_info(2)]
description = Retrieves information about Dashboards from the splunk_rest_data_ui_views_sh_kv_store_lookup KV Store Lookup Table (match by SH & Dashboard Name)
args = shcluster_label,Dashboard_Name
definition = eval $shcluster_label$=lower($shcluster_label$)\
| lookup splunk_rest_data_ui_views_sh_kv_store_lookup shcluster_label AS $shcluster_label$ title AS $Dashboard_Name$ OUTPUTNEW app sharing label panel_title num_panels description type dashboard_size author location updated time_range Report_Reference Dashboard_Reference Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference search BaseSearch acl_perms_read acl_perms_write auto_refresh_delay submitButton autoRun is_time_selector

[get_dashboards_info(3)]
description = Retrieves information about Dashboards from the splunk_rest_data_ui_views_sh_kv_store_lookup KV Store Lookup Table (match by SH, App & Dashboard Name)
args = shcluster_label,App,Dashboard_Name
definition = eval $shcluster_label$=lower($shcluster_label$)\
| lookup splunk_rest_data_ui_views_sh_kv_store_lookup shcluster_label AS $shcluster_label$ app AS $App$ title AS $Dashboard_Name$ OUTPUTNEW sharing label panel_title num_panels description type dashboard_size author location updated time_range Report_Reference Dashboard_Reference Lookup_Reference Datamodel_Reference Macro_Reference Index_Reference Sourcetype_Reference Source_Reference Eventtype_Reference Rest_Reference search BaseSearch acl_perms_read acl_perms_write auto_refresh_delay submitButton autoRun is_time_selector

[get_dashboards_usage(3)]
description = Retrieves Usage information from the Dashboards tracking KV Store about Dashboards (match by SH, App & savedsearch)
args = shcluster_label,app,Dashboard_Name
definition = lookup splunk_index_internal_web_access_tracker_sh_kv_store_lookup shcluster_label AS $shcluster_label$ App AS $app$ Dashboard_Name AS $Dashboard_Name$ OUTPUTNEW Splunk_Instance User Earliest_Access Latest_Access min_spent max_spent avg_spent\
| eval Days_Latest_Access = round((now() - Latest_Access) / 86400 , 0) \
| eval Days_Latest_Access=if(((Days_Latest_Access == "") OR isnull(Days_Latest_Access)),"9999999",Days_Latest_Access)\
| eval max_spent=max_spent/1000\
| `strftime_format(Earliest_Access)`\
| `strftime_format(Latest_Access)`

[get_identity_info(1)]
description = Retrieves information about Identities from the splunk_rest_identities_kv_store_lookup KV Store Lookup Table
args = identity
definition = lookup splunk_rest_identities_kv_store_lookup identity As $identity$ OUTPUTNEW emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name,splunk_role_map,ldap_group_name,ldap_group_type,auth_type \
| eval identity_custom=if(match(author, "splunk-system-user|system"), "splunk-system-user",null())\
| `get_identity_custom_info(identity_custom)`

[get_identity_info(2)]
description = Retrieves information about Identities from the splunk_rest_identities_kv_store_lookup KV Store Lookup Table
args = shcluster_label,identity
definition = lookup splunk_rest_identities_kv_store_lookup shcluster_label As $shcluster_label$ identity As $identity$ OUTPUTNEW emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name,splunk_role_map,ldap_group_name,ldap_group_type,auth_type \
| eval identity_custom=if(match(author, "splunk-system-user|system"), "splunk-system-user",null())\
| `get_identity_custom_info(identity_custom)`

[get_identity_type(1)]
description = Retrieves information about Identities from the splunk_rest_identities_kv_store_lookup KV Store Lookup Table
args = identity
definition = lookup splunk_identities_types_csv_lookup identity As $identity$ OUTPUT emp_name As emp_name_new emp_type As emp_type_new emp_status As emp_status_new emp_lob1 As emp_lob1_new emp_dep As emp_dep_new emp_email As emp_email_new\
| lookup splunk_identities_types_csv_lookup emp_email As emp_email OUTPUT emp_name As emp_name_new emp_type As emp_type_new emp_status As emp_status_new emp_lob1 As emp_lob1_new emp_dep As emp_dep_new \
| eval emp_type = mvappend(emp_type, emp_type_new), \
       emp_status = mvappend(emp_status, emp_status_new), \
       emp_name = mvappend(emp_name, emp_name_new), \
       emp_lob1 = mvappend(emp_lob1, emp_lob1_new), \
       emp_dep = mvappend(emp_dep, emp_dep_new), \
       emp_type = mvappend(emp_type, emp_type_new),\
       emp_email = mvappend(emp_email, emp_email_new)
iseval = 0

[fillnull_identity_info]
description = Fill all identities fields with default values when a value can not be found
definition = fillnull value="no-geo-info" emp_city,emp_country,emp_region1\
| fillnull value="no-emp-info" identity,emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name

[get_identity_info_simple(2)]
description = Retrieves limited information about Identities from the splunk_rest_identities_kv_store_lookup KV Store Lookup Table
args = shcluster_label,identity
definition = lookup splunk_rest_identities_kv_store_lookup shcluster_label As $shcluster_label$ identity as $identity$ OUTPUTNEW emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name \
| fillnull value="no-emp-info" emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name

[get_identity_custom_info(1)]
description = Enriches the splunk_rest_identities_kv_store_lookup KV Store Lookup Table with custom Identities data stored in the splunk_identities_custom_kv_store_lookup Lookup Table
args = identity
definition = eval emp_name=if(emp_name="" OR isnull(emp_name), null(), emp_name)\
| eval email = if ( match(emp_name, "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}") AND (isnull(email) OR email=""), emp_name, email)\
| eval emp_name = if ( match(emp_name, "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"), null(), emp_name)\
| lookup splunk_identities_custom_kv_store_lookup identity as $identity$ OUTPUTNEW emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name

[get_identity_usage(1)]
description = Retrieves information about Identities Activity from the splunk_index_audit_user_login_tracker_sh_kv_store_lookupK Tracking V Store Lookup Table
args = identity
definition = lookup splunk_index_audit_user_login_tracker_sh_kv_store_lookup User AS $identity$ OUTPUTNEW Earliest_Access Latest_Access Splunk_Instance Login_Source\
| `strftime_format(Earliest_Access)`\
| `strftime_format(Latest_Access)`

[get_dm_field(2)]
description = Retrieves Data for a single field from the GMC Data Model
args = dataset,field
definition = tstats SummariesOnly=TRUE Allow_OLD_Summaries=FALSE \
    count\
    From DataModel=GMC\
    Where nodename=Search_Activity.$dataset$\
    By Search_Activity.$dataset$.$field$\
| `drop_dm_object_name(Search_Activity.$dataset$)`\
| table $field$ count

[get_provenance_fields(1)]
description = Extracts Introspection Provenance Fields for Audit Search Activity Dashboard
args = provenance
definition = rex field=$provenance$ "(?<Provenance_Type>.*?):(?<Provenance_KO_Type>.*?):(?<Provenance_KO>.*?)$"\
| eval provenance_tmp=if(isnull(Provenance_Type), provenance, null())\
| rex field=provenance_tmp "(?<Provenance_Type>.*?):(?<Provenance_KO_Type>.*?)$"\
| eval provenance_tmp=if(isnull(Provenance_Type), provenance, null())\
| rex field=provenance_tmp "(?<Provenance_Type>.*?)$"\
| eval Dashboard_Name = if(Provenance_KO_Type="Dashboard", Provenance_KO, null() )\
| rex field=acceleration_id "_DM_(?<datamodel>.*)" \
| eval acceleration_id_report=if(type="report_acceleration", acceleration_id, null()) \
| eval datamodel_acceleration=if(provenance="summary_director", acceleration_id, null()) \
| rex field=acceleration_id_report "_(?<accelerated_report>\w+$)"\
| fields - acceleration_id_report datamodel_acceleration provenance_tmp

[get_instance_info(1)]
description = Retrieves information about Splunk Instances from the splunk_rest_assets_kv_store_lookup KV Store Lookup Table
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_assets_kv_store_lookup host As $Splunk_Instance$ OUTPUTNEW host Splunk_Instance Splunk_Roles serverName host_short host_fqdn host_resolved host_ip mode guid version build os_name os_name_extended cpu_arch os_version os_build startup_time kvStoreStatus numberOfCores numberOfVirtualCores physicalMemoryMB rtsearch_enabled master_uri master_guid licenseState isForwarding isTrial license_labels transparent_hugepages_defrag transparent_hugepages_effective_state transparent_hugepages_enabled ulimits_core_file_size ulimits_cpu_time ulimits_data_file_size ulimits_data_segment_size ulimits_nice ulimits_open_files ulimits_resident_memory_size ulimits_stack_size ulimits_user_processes ulimits_virtual_address_space_size SPLUNK_DB SPLUNK_HOME appServerPorts dfsDisabled dfsMasterPort enableSplunkWebSSL httpport kvStoreDisabled kvStorePort mgmtHostPort minFreeSpace sessionTimeout startwebserver trustedIP\
| lookup splunk_rest_assets_kv_store_lookup Splunk_Instance As $Splunk_Instance$ OUTPUTNEW Splunk_Instance host Splunk_Roles serverName host_short host_fqdn host_resolved host_ip mode guid version build os_name os_name_extended cpu_arch os_version os_build startup_time kvStoreStatus numberOfCores numberOfVirtualCores physicalMemoryMB rtsearch_enabled master_uri master_guid licenseState isForwarding isTrial license_labels transparent_hugepages_defrag transparent_hugepages_effective_state transparent_hugepages_enabled ulimits_core_file_size ulimits_cpu_time ulimits_data_file_size ulimits_data_segment_size ulimits_nice ulimits_open_files ulimits_resident_memory_size ulimits_stack_size ulimits_user_processes ulimits_virtual_address_space_size SPLUNK_DB SPLUNK_HOME appServerPorts dfsDisabled dfsMasterPort enableSplunkWebSSL httpport kvStoreDisabled kvStorePort mgmtHostPort minFreeSpace sessionTimeout startwebserver trustedIP\
| eval physicalMemoryGB=round(physicalMemoryMB / 1024, 2) \
| `strftime_format(startup_time)`\
| fillnull value="no-instance-info" Splunk_Roles

[get_instance_info_simple(1)]
description = Retrieves Limited information about Splunk Instances from the splunk_rest_assets_kv_store_lookup KV Store Lookup Table
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_assets_kv_store_lookup host As $Splunk_Instance$ OUTPUTNEW Splunk_Instance Splunk_Roles serverName host_short host_fqdn host_resolved host_ip\
| lookup splunk_rest_assets_kv_store_lookup Splunk_Instance As $Splunk_Instance$ OUTPUTNEW host Splunk_Roles serverName host_short host_fqdn host_resolved host_ip\
| fillnull value="no-instance-info" Splunk_Roles

[get_shcluster_info(1)]
description = Retrieves Splunk Search Head Cluster Label Name and additional Cluster information
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_shcluster_config_shc_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW shcluster_label mode conf_deploy_fetch_url adhoc_searchhead replication_factor replication_port replication_use_ssl async_replicate_on_proxy register_replication_address captain_is_adhoc_searchhead decommission_search_jobs_wait_secs dynamic_captain heartbeat_period manual_detention max_peer_rep_load percent_peers_to_restart ping_flag preferred_captain quiet_period rolling_restart cxn_timeout heartbeat_timeout rcv_timeout send_timeout rep_cxn_timeout rep_max_rcv_timeout rep_max_send_timeout rep_rcv_timeout rep_send_timeout restart_timeout

[get_search_concurrency(2)]
description = Retrieves Splunk Search Head Concurrency Information
args = shcluster_label,title
definition = eval title="$title$" , $shcluster_label$=lower($shcluster_label$)\
| lookup splunk_rest_admin_search_concurrency_settings_handler_sh_kv_store_lookup shcluster_label AS $shcluster_label$ title OUTPUTNEW max_searches_perc auto_summary_perc base_max_searches max_rt_search_multiplier max_searches_per_cpu max_auto_summary_searches max_hist_scheduled_searches max_hist_searches max_rt_scheduled_searches max_rt_searches\
| fields - $title$

[get_lookup_reference(1)]
description = Extracts Any Reference to Lookups
args = field
definition = rex field=$field$ max_match=100 "\|\s*inputlookup\s+(?<Input_Lookup>[^|]+)" \
| rex field=$field$ max_match=100 "\|\s*from\s+inputlookup:(?<From_Input_Lookup>[^|]+)" \
| rex field=$field$ max_match=100 "\|\s*from\s+lookup:(?<From_Lookup>[^|]+)" \
| rex field=$field$ max_match=100 "\|\s*outputlookup\s+(?<Output_Lookup>[^|]+)" \
| rex field=$field$ max_match=100 "\|\s*lookup\s+(?<Lookup_Lookup>[^|\s]+)" \
| eval Input_Lookup = "Input_Lookup:".Input_Lookup , From_Input_Lookup = "From_Input_Lookup:".From_Input_Lookup, From_Lookup = "From_Lookup:".From_Lookup, Output_Lookup = "Output_Lookup:".Output_Lookup, Lookup_Lookup = "Lookup_Lookup:".Lookup_Lookup\
| eval Lookup_Reference=mvsort(mvdedup(lower(mvappend(Lookup_Lookup,Input_Lookup,From_Lookup,From_Input_Lookup,Output_Lookup)))) \
| rex field=Lookup_Reference mode=sed "s/\"|append=\w+|create_empty=\w+|createinapp=\w+|override_if_empty=\w+|event_time_field=\w+|output_format=\w+|local=\w+|update=\w+|key_field=\w+|enabled=\w+|max=\w+|type=\w+|\s+where\s+.*|\$//g" \
`gmc_comment("| rex field=Lookup_Reference mode=sed "s/(\s|\]).*$//g" ")` \
| eval Lookup_Reference=if(((Lookup_Reference == "") OR isnull(Lookup_Reference)),"no-lookup-reference", mvsort(mvdedup(trim(Lookup_Reference)))) \
| fields - Input_Lookup,From_Input_Lookup,From_Lookup,Output_Lookup,Lookup_Lookup\
| fillnull value="no-lookup-reference" Lookup_Reference

[get_macro_reference(1)]
description = Extracts Any Reference to Macros
args = field
definition = rex field=$field$ max_match=100 "`(?<Macro_Reference>\p{Any}+?)`" \
| rex field=Macro_Reference mode=sed "s/\"|\s+//g" \
| eval Macro_Reference = mvfilter((! match(Macro_Reference,"^\||^\)|^:|^\[|^comment|^gmc_comment"))) \
| eval Macro_Reference = if(((Macro_Reference == "") OR isnull(Macro_Reference)), "no-macro-reference", Macro_Reference) \
| mvexpand Macro_Reference \
| rex field=Macro_Reference max_match=100 "(?<Macro_Name>^[a-zA-Z0-9_-]+)" \
| rex field=Macro_Reference max_match=100 "\((?<Macro_Args>.*?)\)" \
| makemv delim="," Macro_Args \
| eval Macro_Args_Count = mvcount(Macro_Args) \
| eval Macro_Title = if (isnull(Macro_Args_Count), Macro_Name, Macro_Name . "(" . Macro_Args_Count . ")") \
| eval Macro_Title = if(((Macro_Title == "") OR isnull(Macro_Title)), "no-macro-title", Macro_Title) \
| fields - Macro_Reference1 Macro_Name Macro_Args Macro_Args_Count

[get_macro_definition(2)]
description = Retrieve Macro definition
args = shcluster_label,title
definition = lookup splunk_rest_data_macros_sh_kv_store_lookup shcluster_label As $shcluster_label$ title As $title$ OUTPUTNEW definition As Macro_Definition

[get_datamodel_reference(1)]
description = Extracts Any Reference to Data Models
args = field
definition = rex field=$field$ max_match=100 "[fF][rR][oO][mM]\s*[dD][aA][tT][aA][mM][oO][dD][eE][lL][:=](?<Datamodel_Reference1>.*?)\s" \
| rex field=$field$ max_match=100 "\|\s*(datamodel|datamodelsimple)\s+(?<Datamodel_Reference2>.*?)\s" \
| eval Datamodel_Reference=coalesce(Datamodel_Reference1,Datamodel_Reference2) \
| rex field=Datamodel_Reference mode=sed "s/\"//g" \
| eval Datamodel_Reference = mvfilter( ! match(Datamodel_Reference, "^\$|type=|^\|") )\
| eval Datamodel_Reference=if(((Datamodel_Reference == "") OR isnull(Datamodel_Reference)),"no-datamodel-reference", mvdedup(mvsort(Datamodel_Reference)))\
| fields - Datamodel_Reference1 Datamodel_Reference2\
| fillnull value="no-datamodel-reference" Datamodel_Reference

[get_index_reference(1)]
description = Extracts Any Reference to Index(es)
args = field
definition = rex field=$field$ max_match=100 "index\s*=[\s\"]?(?<Index_Reference1>[a-z0-9-_*]+)[\s\"]" \
| rex field=$field$ max_match=100 "index\s*=\s*\"?(?<Index_Reference2>_[a-z]+)[\s\"]" \
| rex field=$field$ max_match=100 "index=(?<Index_Reference3>[a-z0-9-_*]+)" \
| rex field=$field$ max_match=100 "index=(?<Index_Reference4>[`a-z0-9-_*]+)" \
| eval Index_Reference = mvdedup(trim(mvappend(Index_Reference1,Index_Reference2,Index_Reference3,Index_Reference4))) \
| eval Index_Reference = if(match(Index_Reference, "index\s*=\s*_\*"), "all-internal-indexes", Index_Reference) \
| eval Index_Reference = if(match(Index_Reference, "index\s*=\s*\*"), "all-indexes", Index_Reference) \
| eval Index_Reference = mvfilter((!match(Index_Reference,"^1$"))) \
| eval Index_Reference = if(isnull(Index_Reference) OR Index_Reference="", "no-index-reference", Index_Reference) \
| fields - Index_Reference1 Index_Reference2 Index_Reference3 Index_Reference4

[get_sourcetype_reference(1)]
description = Extracts Any Reference to Source Type(s)
args = field
definition = rex field=$field$ max_match=100 "sourcetype\\s*=\\s*(?<Sourcetype_Reference1>.*?)[\\s\"\\|]" \
| rex field=Sourcetype_Reference1 mode=sed "s/^[\\s$?><()\\\\,^=]*//g" \
| rex field=$field$ max_match=100 "sourcetype\\s+IN\\s*\\((?<Sourcetype_Reference2>.*?)\\)" \
| makemv delim="," Sourcetype_Reference2 \
| rex field=Sourcetype_Reference2 mode=sed "s/^[\\s$?><()\\\\,^=]*//g" \
| eval Sourcetype_Reference=coalesce(Sourcetype_Reference1,Sourcetype_Reference2), Sourcetype_Reference=mvfilter((! match(Sourcetype_Reference,"^sourcetype|^trim|ifisnull|^\"|\[|\]"))), Sourcetype_Reference=mvdedup(mvsort(Sourcetype_Reference)) \
| rex field=Sourcetype_Reference mode=sed "s/\(|\)//g"\
| eval Sourcetype_Reference=if(((Sourcetype_Reference == "") OR isnull(Sourcetype_Reference)),"no-sourcetype-reference",Sourcetype_Reference)\
| fields - Sourcetype_Reference1 Sourcetype_Reference2\
| fillnull value="no-sourcetype-reference" Sourcetype_Reference

[get_source_reference(1)]
description = Extracts Any Reference to Source(s)
args = field
definition = rex field=$field$ max_match=100 "source\\s*=\\s*(?<Source_Reference1>.*?)[\\s\"\\|]" \
| rex field=Source_Reference1 mode=sed "s/^[\\s$?><()\\\\,^=]*//g" \
| rex field=$field$ max_match=100 "source\\s+IN\\s*\\((?<Source_Reference2>.*?)\\)" \
| makemv delim="," Source_Reference2 \
| rex field=Source_Reference2 mode=sed "s/^[\\s$?><()\\\\,^=]*//g" \
| eval Source_Reference=coalesce(Source_Reference1,Source_Reference2), Source_Reference=mvfilter((! match(Source_Reference,"^source|^\"|^ifisnull"))), Source_Reference=mvdedup(mvsort(Source_Reference)) \
| eval Source_Reference=if(((Source_Reference == "") OR isnull(Source_Reference)),"no-source-reference",Source_Reference)\
| fields - Source_Reference1 Source_Reference2\
| fillnull value="no-source-reference" Source_Reference

[get_eventtype_reference(1)]
description = Extracts Any Reference to Event Type(s)
args = field
definition = rex field=$field$ max_match=100 "eventtype\\s*=\\s*(?<Eventtype_Reference1>.*?)[\\s\"\\|]" \
| rex field=Eventtype_Reference1 mode=sed "s/^[\\s$?><()\\\\,^=\\]\\[+]*//g" \
| rex field=$field$ max_match=100 "eventtype\\s+IN\\s*\\((?<Eventtype_Reference2>.*?)\\)" \
| makemv delim="," Eventtype_Reference2 \
| rex field=Eventtype_Reference2 mode=sed "s/^[\\s$?><()\\\\,^=]*//g" \
| eval Eventtype_Reference=coalesce(Eventtype_Reference1,Eventtype_Reference2), Eventtype_Reference=mvfilter((! match(Eventtype_Reference,"^eventtype|^trim|ifisnull|^\""))), Eventtype_Reference=mvdedup(mvsort(Eventtype_Reference))\
| eval Eventtype_Reference=if(((Eventtype_Reference == "") OR isnull(Eventtype_Reference)),"no-eventtype-reference",Eventtype_Reference)\
| fields - Eventtype_Reference1 Eventtype_Reference2\
| fillnull value="no-eventtype-reference" Eventtype_Reference

[get_report_reference(1)]
description = Extracts Any Reference to Report(s)
args = field
definition = rex field=data max_match=100 "<search ref=\"(?<Report_Reference1>.*)\"></search>" \
| rex field=search max_match=900 "loadjob\s+savedsearch[=]\s*\"?(?<Report_Reference2>.*?)\"" \
| rex field=search max_match=900 "from\s+savedsearch:\s*\"?(?<Report_Reference3>.*?)\"?" \
| eval Report_Reference=mvdedup(mvappend(Report_Reference1,Report_Reference2,Report_Reference3)) \
| eval Report_Reference=if(((Report_Reference == "") OR isnull(Report_Reference)),"no-report-reference",Report_Reference) \
| fillnull value="no-report-reference" Report_Reference \
| fields - Report_Reference1,Report_Reference2,Report_Reference3

[get_dashboard_reference(1)]
description = Extracts Any Reference to Dashboard(s)
args = field
definition = rex field=$field$ max_match=100 "href=\"(?<Dashboard_Reference>\w+)\">"\
| eval Dashboard_Reference=mvdedup(mvsort(Dashboard_Reference)), Dashboard_Reference=if(((Dashboard_Reference == "") OR isnull(Dashboard_Reference)),"no-dashboard-reference",mvdedup(mvsort(Dashboard_Reference)))\
| fillnull value="no-dashboard-reference" Dashboard_Reference

[get_rest_reference(1)]
description = Extracts Any Reference to REST Calls
args = field
definition = rex field=$field$ max_match=100 "\|\s*rest\s+(?<Rest_Reference>.*?)[|\]\n\r]"\
| eval Rest_Reference = mvfilter ( (! match(Rest_Reference,"^\$")))\
| rex field=Rest_Reference mode=sed "s/\"//g"\
| eval Rest_Reference = mvdedup(mvsort(Rest_Reference))\
| eval Rest_Reference=if(((Rest_Reference == "") OR isnull(Rest_Reference)),"no-rest-reference", mvdedup(mvsort(Rest_Reference)))\
| fillnull value="no-rest-reference" Rest_Reference

### Field Renames

[rename_instance_fields]
description = Renames Splunk Instance REST Fields to human-readable format
definition = rename \
    numberOfCores AS "Instance pCPU"\
    numberOfVirtualCores AS "Instance vCPU"\
    version AS "Instance Version"\
    os_name AS "Instance OS"\
    os_version AS "Instance OS Version" \
    startup_time AS "Instance OS Startup" \
    isForwarding AS "Instance Forwarding?" \
    ulimits_open_files AS "Instance Ulimits Open Files" \
    ulimits_stack_size AS "Instance Ulimits Stack Size" \
    ulimits_user_processes AS "Instance Ulimits User Processes" \
    transparent_hugepages_defrag AS "Instance THP Defrag Status" \
    transparent_hugepages_enabled AS "Instance THP Status" \
    transparent_hugepages_effective_state AS "Instance THP State" \
    host_ip AS "Instance IP" \
    host_fqdn AS "Instance FQDN" \
    host_short AS "Instance Hostname"\
    appServerPorts AS "Instance App Port" \
    dfsDisabled AS "Instance DFS Disabled?" \
    dfsMasterPort AS "Instance DFS Master Port" \
    enableSplunkWebSSL AS "Instance HTTPS Enabled?" \
    httpport AS "Instance  Web Port" \
    kvStoreDisabled AS "Instance KV Store Disabled?" \
    kvStorePort AS "Instance KV Store Port" \
    mgmtHostPort AS "Instance Management Port" \
    minFreeSpace AS "Instance  Pause Indexing Below" \
    sessionTimeout AS "Instance Session Timeout" \
    startwebserver AS "Instance Run Splunk Web?" \
    trustedIP AS "Instance Trusted IP"\
    physicalMemoryMB AS "Instance Memory (MB)"\
    physicalMemoryGB AS "Instance Memory (GB)"\
    guid AS GUID

[rename_reference_fields]
description = Renames Reference Fields to human-readable format
definition = rename \
    Datamodel_Reference AS "Datamodel Reference"\
    decompressed_slices AS "Decompressed Slices"\
    Eventtype_Reference AS "Eventtype Reference"\
    Index_Reference AS "Index Reference"\
    Lookup_Reference AS "Lookup Reference"\
    Macro_Reference AS "Macro_Reference"\
    Sourcetype_Reference AS "Sourcetype Reference"\
    Source_Reference AS "Source Reference"\
    Report_Reference AS "Report Reference"\
    Dashboard_Reference AS "Dashboard Reference"\
    Rest_Reference AS "Rest Reference"

[rename_itsi_fields]
description = Renames ITSI Fields to human-readable format
definition = rename \
    kpi_title AS "ITSI KPI(s)"\
    service_title AS "ITSI Service(s)"

[rename_saved_searches_fields]
description = Renames Saved Searches REST Fields to human-readable format
definition = rename\
    author AS "Job Owner"\
    app AS "Job App"\
    sharing AS "Job App Sharing"\
    allow_skew AS "Job Allow Skew"\
    auto_summarize AS "Job Report Accelerated?"\
    cron_schedule AS "Job Schedule"\
    description AS "Job Description"\
    dispatch_earliest_time AS "Job Dispatch ET"\
    dispatch_latest_time AS "Job Dispatch LT"\
    max_concurrent AS "Job Max Concurrent"\
    realtime_schedule AS "Job RT Schedule"\
    savedsearch_type AS "Job Type"\
    schedule_priority AS "Job Schedule Priority"\
    schedule_window AS "Job Schedule Window"\
    is_scheduled AS "Job Scheduled?"\
    run_n_times AS "Job Run N Times"\
    run_on_startup AS "Job Run on Startup?"\
    savedsearch_name AS "Job Name"\
    disabled AS "Job Disabled?"\
    is_visible AS "Job Visible?"\
    acl_perms_read As "Read Permissions"\
    acl_perms_write As "Write Permissions"\
    email_to AS "Job Email Recipients"\
    savedsearch_search AS "Job Search" \
    action_email AS "Job Send Email?" \
    logevent AS "Job Logevent?" \
    logevent_param_event AS "Job Event Message"\
    lookup AS "Job Output to Lookup?" \
    lookup_append AS "Job Append Lookup?" \
    lookup_filename AS "Job Lookup File"\
    output_message AS "Job Messages?" \
    output_message_param_msgid AS "Job Message ID" \
    output_message_param_name AS "Job Message Name" \
    populate_lookup AS "Job Populate Lookup?" \
    script AS "Job Run Script?" \
    script_filename AS "Job Script Name" \
    webhook AS "Job Run Webhook?" \
    webhook_param_url AS "Job Webhook URL" \
    summary_index AS "Job Summary Indexing?" \
    summary_index_name AS "Job Summary Index Name" \
    auto_summarize_cron_schedule AS "Job Summary Indexing Schedule" \
    auto_summarize_dispatch_earliest_time AS "Job Summary Indexing ET" \
    auto_summarize_dispatch_latest_time AS "Job Summary Indexing LT" \
    auto_summarize_max_concurrent AS "Job Summary Indexing Max Concurrent" \
    dispatch_ttl AS "Job TTL"\
    qualifiedSearch AS "Job Qualified Search" \
    correlationsearch_enabled AS "Job Correlation Search?" \
    correlationsearch_label AS "Job Correlation Search Name"\
    correlationsearch_related_searches AS "Job Correlation Search Related Searches"\
    cron_schedule_described AS "Job Schedule Human"\
    scheduled_times AS "Job Sample Scheduled Times"\
    updated AS "Job Update Time"\
    Days_Latest_Access_Display AS "Job Last Access"\
    next_scheduled_time AS "Job Next Scheduled Times"\
    populate_lookup_dest As "Job Lookup"\
    actions As "Job Trigger Actions"\
    dispatch_as As "Job Run As"

[rename_macros_fields]
description = Renames Macros REST Fields to human-readable format
definition = rename\
    author AS "Macro Owner"\
    app AS "Macro App"\
    sharing AS "Macro App Sharing"\
    description AS "Macro Description"\
    disabled AS "Macro Disabled?"\
    updated AS "Macro Update Time"\
    title AS "Macro Name"\
    definition AS "Macro Definition"\
    args AS "Macro Arguments"\
    errormsg AS "Macro Error Msg"\
    iseval AS "Macro Using eval-based definition?"\
    validation AS "Macro Validation"

[rename_hec_fields]
description = Renames HTTP Event Collector REST Fields to human-readable format
definition = rename \
    app AS "HEC App" \
    disabled AS "HEC Token Disabled?" \
    title AS "HEC Name" \
    token_name AS "HEC Token Name" \
    token AS "HEC Token ID(s)" \
    index_name AS "HEC Index" \
    indexes AS "HEC Index List" \
    source_name AS "HEC Source" \
    sourcetype_name AS "HEC Sourcetype" \
    useACK AS "HEC useACK?" \
    status_message As "HEC Status Message" \
    events_processed As "HEC Events Processed" \
    channel As "HEC Channel" \
    http_input_body_size As "HEC Body Size" \
    source_IP As "Source IP" \
    name As "HEC Token Name2" \
    dedicatedIoThreads As "Number of threads for HEC server" \
    enableSSL As "SSL enablement status" \
    port As "HEC IP port" \
    rcvbuf As "Socket receive buffer size (bytes)"

[rename_dashboards_fields]
description = Renames Dashboards REST Fields to human-readable format
definition = rename \
    title AS "Dashboard Title" \
    app AS "Dashboard App"\
    sharing AS "Dashboard App Sharing"\
    type AS "Dashboard Type"\
    author AS "Dashboard Owner"\
    updated AS "Dashboard Update Time"\
    label AS "Dashboard Name" \
    description AS "Dashboard Sescription" \
    search AS "Dashboard Searches" \
    BaseSearch AS "Dashboard Base Searches" \
    location AS "Dashboard Location" \
    description AS "Dashboard Description" \
    dashboard_size AS "Dashboard Size" \
    acl_perms_read As "Read Permissions" \
    acl_perms_write As "Write Permissions" \
    Days_Latest_Access_Display AS "Dashboard Last Access" \
    num_panels As "Number of Panels" \
    Num_Searches As "Number of Searches" \
    autoRun As "Autorun?" \
    submitButton As "Submit Button?" \
    auto_refresh_delay As "Auto Refresh"

[rename_lookup_fields]
description = Renames Lookup Definition REST Fields to human-readable format
definition = rename \
    updated AS "Lookup Update Time"\
    app AS "Lookup App"\
    sharing AS "Lookup App Sharing"\
    description AS "Lookup Description"\
    author AS "Lookup Owner"\
    disabled AS "Lookup Disabled?"\
    Type AS "Lookup Type"\
    Lookup AS "Lookup Name"\
    Filename AS "Lookup Filename"\
    Lookup_File_Path AS "Lookup File Path"\
    Collection AS "Lookup Collection Name"\
    Match_Type AS "Lookup Match Type"\
    Replicate AS "Lookup Replication?"\
    Allow_Caching AS "Lookup Allow Caching?"\
    Filter AS "Lookup Filter"\
    Index_Fields_List AS "Lookup Index Fields List"\
    Min_Matches AS "Lookup Min Matches"\
    Max_Matches AS "Lookup Max Matches"\
    Fields_List AS "Supported Fields (Lookup Definitions)"\
    case_sensitive_match AS "Lookup Case Sensitive Match?"

[rename_auto_lookup_fields]
description = Renames Automatic Lookup REST Fields to human-readable format
definition = rename \
    author AS "Auto Lookup Owner"\
    updated AS "Auto Lookup Update Time"\
    app AS "Auto Lookup App"\
    sharing AS "Auto Lookup App Sharing"\
    description AS "Auto Lookup Description"\
    attribute AS "Auto Lookup Name"\
    transform AS "Lookup Definition"\
    value AS "Auto Lookup Input/Output Fields"\
    overwrite AS "Auto Lookup Overwrite Field Values"\
    stanza AS "Auto Lookup Source Type"

[rename_identity_fields]
description = Renames GMC Identity Fields to human-readable format
definition = rename \
identity As "Identity" \
emp_name As "User Full Name" \
emp_first As "User First Name" \
emp_last As "User Last Name" \
emp_type As "User Employment Type" \
emp_status As "User Employment Status" \
emp_title As "User Job Title" \
emp_email As "User Email" \
emp_function As "User Function" \
emp_manager As "User Manager" \
emp_company As "User Company" \
emp_startDate As "User Hire Date" \
emp_endDate As "User Termination Date" \
emp_city As "User City" \
emp_region1 As "User Region/State" \
emp_region2 As "User Region" \
emp_country As "User Country" \
emp_lat As "User Work Lat" \
emp_lon As "User Work Lon" \
emp_location As "User Location Code" \
emp_office As "User Office Location" \
emp_site As "User Site Name" \
emp_floor As "User Floor Number" \
emp_phone1 As "User Phone1" \
emp_phone2 As "User Phone2" \
emp_tz As "User Time Zone" \
emp_bunit As "User Business Unit" \
emp_cc As "User Cost Center" \
emp_dep As "User Department" \
emp_lob1 As "User LOB1" \
emp_lob2 As "User LOB2" \
emp_lob3 As "User LOB3" \
emp_lob4 As "User LOB4" \
emp_lob5 As "User LOB5" \
emp_lob6 As "User LOB6" \
vendor_name As "Vendor Name"

[rename_license_fields]
description = Renames Splunk License Fields to human-readable format
definition = rename \
    idxcluster_label AS "Indexer Cluster"\
    Lic_Pool AS "License Pool"\
    Index_Name AS "Index Name"\
    Lic_Sourcetype AS "Source Type"\
    Lic_Source AS "Source"\
    Lic_Host AS "Host"\
    Lic_Pool_Size AS "Pool Size (Bytes)"\
    Lic_Pool_Size_MB AS "Pool Size (MB)"\
    Lic_Pool_Size_GB AS "Pool Size (GB)"\
    Lic_Pool_Size_TB AS "Pool Size (TB)"\
    License_Usage AS "License Usage (Bytes)"\
    License_Usage_MB AS "License Usage (MB)"\
    License_Usage_GB AS "License Usage (GB)"\
    License_Usage_TB AS "License Usage (TB)"

[rename_shcluster_fields]
description = Renames Search Head Cluster REST Fields to human-readable format
definition = rename mode AS "Member Operational Mode"\
    conf_deploy_fetch_url AS "Deployer URL"\
    adhoc_searchhead AS "Can Member Run Scheduled Searches?"\
    replication_factor AS "Replication Factor"\
    replication_port AS "Replication Port"\
    replication_use_ssl AS "Use SSL when sending replication data?"\
    async_replicate_on_proxy AS "Async Replicate on Proxy"\
    register_replication_address AS "Member address for accepting replication data"\
    captain_is_adhoc_searchhead AS "Can Captain Run Scheduled Searches?"\
    decommission_search_jobs_wait_secs AS "Time Member waits for existing searches to complete before restarting"\
    dynamic_captain AS "Is Captain Selected By Elections?"\
    heartbeat_period AS "Time member attempts to send a heartbeat to captain"\
    manual_detention AS "Put the member in manual Detention?"\
    max_peer_rep_load AS "Maximum number of replications that can be ongoing as a target"\
    percent_peers_to_restart AS "% Members to restart simultaneously"\
    ping_flag AS "Facilitate communication between the captain and members"\
    preferred_captain AS "Member prefered for captaincy?"\
    quiet_period AS "Time captain waits for members to add themselves to cluster"\
    rolling_restart AS "Rolling Restart Mode"\
    cxn_timeout AS "Low-level timeout"\
    heartbeat_timeout AS "Time before captain considers a member down"\
    rcv_timeout AS "Low-level timeout for receiving data between members"\
    send_timeout AS "Low-level timeout for sending data between members"\
    rep_cxn_timeout AS "Low-level timeout for establishing a connection for replicating data"\
    rep_max_rcv_timeout AS "Max cumulative time for receiving replication acknowledgement data from members"\
    rep_max_send_timeout AS "Max time for sending replication slice data between members"\
    rep_rcv_timeout AS "Low-level timeout for receiving replication data between members"\
    rep_send_timeout AS "Low-level timeout for sending replication data between members"\
    restart_timeout AS "Time captain waits for members to come back when restarted"

[get_field_desc(1)]
description = Retrieves GMC Data Model Field Description
args = Field_Name
definition = lookup splunk_fields_all_csv_lookup Field_Name AS $Field_Name$ OUTPUTNEW Field_Description

[gmc_time_format(1)]
description = GMC StrfTime Formatter
args = time
#definition = $time$ = strftime($time$, "%m/%d/%Y %H:%M:%S")
definition = $time$ = strftime($time$, "%A %B %d, %Y %I:%M:%S %p %Z")

[gmc_drop_dm_object_name(1)]
description = Renames GMC Data Model Dataset Fields
args = object
definition = rename "$object$.*" As *

[from_introspection]
description = Retrieves GMC Introspection Dataset Data using the | from datamodel command
definition = from datamodel:GMC.Introspection_Search_Usage \
| `get_instance_info(host)` \
| fields _time Splunk_Roles host search_id search_head app user acceleration_id delta_scan_count total_run_time fd_used mem_used normalized_pct_cpu page_faults pct_cpu pct_memory pid ppid provenance read_mb savedsearch_name scan_count search_type status t_count written_mb mode

[from_audit]
description = Retrieves GMC Audit Dataset Data using the | from datamodel command
definition = from datamodel:GMC.Audit_Search \
| `get_instance_info(host)` \
| fields _time Splunk_Roles host available_count considered_events datamodel decompressed_slices event_count dispatch_time exec_time info result_count roles savedsearch_name scan_count search search_et search_id search_lt search_startup_time search_type searched_buckets total_run_time total_slices user

[from_internal]
description = Retrieves GMC Internal Dataset Data using the | from datamodel command
definition = from datamodel:GMC.Internal_Scheduler \
| `get_instance_info(host)` \
| fields _time Splunk_Roles host app search_id_normalized concurrency_category concurrency_context concurrency_limit dispatch_time priority reason result_count total_run_time savedsearch_id savedsearch_name scheduled_time search_id search_type skipped_count info user window_time alert_actions Total_Executions Skipped_Executions

[gmc_identities]
description = Retrieves GMC Identities
definition = inputlookup splunk_rest_identities_kv_store_lookup \
| table identity,emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name \
| `rename_identity_fields`

[custom_identities]
description = Retrieves GMC Custom Identities
definition = inputlookup splunk_identities_custom_kv_store_lookup \
| table identity,emp_name,emp_first,emp_last,emp_type,emp_status,emp_title,emp_email,emp_function,emp_manager,emp_company,emp_startDate,emp_endDate,emp_city,emp_region1,emp_region2,emp_country,emp_lat,emp_lon,emp_location,emp_office,emp_site,emp_floor,emp_phone1,emp_phone2,emp_tz,emp_bunit,emp_cc,emp_dep,emp_lob1,emp_lob2,emp_lob3,emp_lob4,emp_lob5,emp_lob6,vendor_name \
| `rename_identity_fields`

[get_fields_list]
description = Gather field list using | fieldsummary
definition = rename "eai:acl.*" as "*" , "eai:*" AS "*"\
| fields - "perms.*", "can_*", id, published, removable, modifiable, updated \
| fieldsummary \
| rename field AS Fields_List \
| fields Fields_List \
| where Fields_List!="Fields_List" \
| mvcombine Fields_List \
| eval Fields_List=mvjoin(Fields_List," ")

[rename_search_concurrency_fields]
description = Renames SH Search Concurrency REST Fields to human-readable format
definition = rename \
    base_max_searches AS "Base Max Searches" \
    max_auto_summary_searches AS "Max Auto Summary Searches" \
    max_hist_scheduled_searches AS "Max Historical Scheduled Searches"\
    max_hist_searches AS "Max Historical Searches" \
    max_searches_per_cpu AS "Max Searches Per CPU"\
    max_searches_perc AS "Max Searches %" \
    auto_summary_perc AS "Auto Summary %" \
    max_rt_search_multiplier AS "Max Real-Time Search Multiplier" \
    max_rt_scheduled_searches AS "Max Real-Time Scheduled Searches" \
    max_rt_searches AS "Max Real-Time Searches"

[strptime_format(1)]
description = StrpTime Formatting
args = time
definition = rex field=$time$ mode=sed "s/^19.*//g"\
| eval $time$ = strptime($time$, "%Y-%m-%dT%H:%M:%S%z")

[strftime_format(1)]
description = StrfTime Formatting
args = time
#definition = eval $time$ = strftime($time$, "%m/%d/%Y %H:%M:%S")
definition = eval $time$ = strftime($time$, "%A %B %d, %Y %I:%M:%S %p %Z")

[ustime_format(1)]
description = US Time Formatting
args = time
definition = eval $time$ = strftime($time$, "%a %b %d %Y %H:%M:%S (%Z)")

[fix_identities_info]
description = Fixes GMC Identity information
definition = eval \
    emp_city = case ( match(emp_city, "Ciudad Autonoma Buenos Aires"), "Buenos Aires", \
    match(emp_city, "Frankfurt Am Main"), "Frankfurt",\
    true(), emp_city ) , \
    emp_region1 = case ( match(emp_region1, "mic"), "MI",\
    true(), emp_region1 ) , \
    emp_country = case( match(emp_country, "(?i)usa"), "United States", \
    emp_country="IND", "India", emp_country="ARG", "Argentina",\
    true(), emp_country ),\
    emp_loc = case ( isnull(emp_loc), `setup_emp_loc`,\
    true(), emp_loc ), \
    emp_type = case ( isnull(emp_type), `setup_emp_type`,\
    true(), emp_type ), \
    emp_status = case ( isnull(emp_status), `setup_emp_status`,\
    true(), emp_status )

[get_geo_info(3)]
description = Retrieves Identity Geographical Information
args = emp_city,emp_region1,emp_country
definition = lookup splunk_cities_geo_sh_csv_lookup city AS $emp_city$ region AS $emp_region1$ country AS $emp_country$ OUTPUTNEW latitude AS emp_lat longitude AS emp_lon\
| lookup splunk_cities_geo_sh_csv_lookup city AS $emp_city$ region_code AS $emp_region1$ country AS $emp_country$ OUTPUTNEW latitude AS emp_lat longitude AS emp_lon\
| lookup splunk_cities_geo_sh_csv_lookup city AS $emp_city$ country AS $emp_country$ OUTPUTNEW latitude AS emp_lat longitude AS emp_lon\
| lookup splunk_cities_geo_sh_csv_lookup city AS $emp_city$ OUTPUTNEW latitude AS emp_lat longitude AS emp_lon

[get_iplocation_info2(1)]
description = Retrieves Geographical Information from IP
args = ip
definition = fillnull value="unknown" $ip$\
    | foreach $ip$\
    [ mvexpand <<FIELD>>\
    | iplocation <<FIELD>>]\
| eval\
    emp_city = if(isnotnull(City) AND City!="", City, emp_city),\
    emp_region1 = if(isnotnull(Region) AND Region!="", Region, emp_region1),\
    emp_country = if(isnotnull(Country) AND Country!="", Country, emp_country),\
    emp_lat = if(isnotnull(lat) AND lat!="", lat, emp_lat),\
    emp_lon = if(isnotnull(lon) AND lon!="", lon, emp_lon)

[tstats_gmc_introspection]
description = Retrieves GMC tstats fields required for Introspection
definition = latest(Search_Activity.Introspection_Search_Usage.acceleration_id) AS acceleration_id\
    latest(Search_Activity.Introspection_Search_Usage.app3) AS app\
    max(Search_Activity.Introspection_Search_Usage.delta_scan_count) AS delta_scan_count\
    max(Search_Activity.Introspection_Search_Usage.total_run_time3) AS total_run_time\
    max(Search_Activity.Introspection_Search_Usage.fd_used) AS fd_used\
    max(Search_Activity.Introspection_Search_Usage.mem_used) AS mem_used\
    max(Search_Activity.Introspection_Search_Usage.normalized_pct_cpu) AS normalized_pct_cpu\
    max(Search_Activity.Introspection_Search_Usage.pct_cpu) AS pct_cpu\
    max(Search_Activity.Introspection_Search_Usage.page_faults) AS page_faults\
    latest(Search_Activity.Introspection_Search_Usage.provenance) AS provenance\
    max(Search_Activity.Introspection_Search_Usage.read_mb) AS read_mb\
    latest(Search_Activity.Introspection_Search_Usage.savedsearch_name3) AS savedsearch_name\
    max(Search_Activity.Introspection_Search_Usage.scan_count3) AS scan_count\
    latest(Search_Activity.Introspection_Search_Usage.search_type3) AS search_type\
    max(Search_Activity.Introspection_Search_Usage.t_count) AS t_count\
    latest(Search_Activity.Introspection_Search_Usage.user3) AS user\
    max(Search_Activity.Introspection_Search_Usage.written_mb) AS written_mb\
    latest(Search_Activity.Introspection_Search_Usage.search_head) as search_head\
    latest(Search_Activity.Introspection_Search_Usage.mode) as mode\
    latest(Search_Activity.Introspection_Search_Usage.ppid) as ppid\
    values(host) as host

[rename_gmc_introspection_fields]
description = Renames GMC Introspection Data Model Fields to human-readable format
definition = eval mode = case (\
    mode = "RT", "Real-Time", \
    mode = "RT indexed", "Real-Time Indexed", \
    mode = "historical", "Historical", \
    mode = "historical batch", "Historical Batch",\
    true(), mode)\
| eval Provenance_Type = case (\
    Provenance_Type = "UI", "User Interface", \
    Provenance_Type = "scheduler", "Scheduler", \
    Provenance_Type = "summary_director", "Report Summarization", \
    Provenance_Type = "rest", "Rest",\
    Provenance_Type = "Splunkjs", "splunkjs",\
    Provenance_Type = "unknown", null(),\
    true(), Provenance_Type)\
| eval `gmc_time_format(_time)`\
| rename _time AS "Search Time"\
acceleration_id AS "Acceleration ID"\
Dashboard_Name AS "Dashboard"\
datamodel AS "Datamodel"\
delta_scan_count AS "Delta Scan Count"\
fd_used AS "Open Files"\
max_spent AS "Dashboard Load Time"\
mem_used AS "Memory Used"\
mode AS "Search Mode"\
normalized_pct_cpu AS "Normalized CPU %"\
pct_cpu AS "CPU %"\
page_faults AS "Page Faults"\
pid AS "PID"\
ppid AS "PPID"\
provenance AS "Provenance"\
Provenance_KO AS "Dashboard"\
Provenance_KO_Type AS "Provenance Type"\
Provenance_Type AS "Provenance"\
read_mb AS "Read MB"\
scan_count AS "Scan Count"\
search_head AS "Search Head"\
t_count AS "Thread Count"\
total_run_time AS "Runtime in Sec"\
'total_run_time' AS "Runtime"\
ulimits_open_files AS "Ulimit Open Files"\
ulimits_stack_size AS "Ulimit Stack Size"\
ulimits_user_processes AS "Ulimit User Processes"\
version AS "Splunk Version"\
written_mb AS "Written MB"\
search_id_normalized AS search_id_normalized\
app AS "App"\
search_type AS "Search Type"\
info AS "Status"\
user AS User\
host As "Splunk Instance"\
app_type As "Splunk Premium Apps"\
perc_vCPU_Used As "vCPU Usage"

[tstats_gmc_internal]
description = Retrieves GMC tstats fields required for Internal
definition = latest(Search_Activity.Internal_Scheduler.app2) AS app\
    latest(Search_Activity.Internal_Scheduler.concurrency_category) AS concurrency_category\
    latest(Search_Activity.Internal_Scheduler.concurrency_context) AS concurrency_context\
    latest(Search_Activity.Internal_Scheduler.concurrency_limit) AS concurrency_limit\
    latest(Search_Activity.Internal_Scheduler.dispatch_time2) AS dispatch_time\
    latest(Search_Activity.Internal_Scheduler.priority) AS priority\
    latest(Search_Activity.Internal_Scheduler.reason) AS reason\
    latest(Search_Activity.Internal_Scheduler.result_count2) AS result_count\
    latest(Search_Activity.Internal_Scheduler.total_run_time2) AS total_run_time\
    latest(Search_Activity.Internal_Scheduler.savedsearch_id) AS savedsearch_id\
    latest(Search_Activity.Internal_Scheduler.savedsearch_name2) AS savedsearch_name\
    latest(Search_Activity.Internal_Scheduler.scheduled_time) AS scheduled_time\
    latest(Search_Activity.Internal_Scheduler.search_type2) AS search_type\
    latest(Search_Activity.Internal_Scheduler.skipped_count) AS skipped_count\
    latest(Search_Activity.Internal_Scheduler.info2) AS info\
    latest(Search_Activity.Internal_Scheduler.user2) AS user\
    latest(Search_Activity.Internal_Scheduler.window_time) AS window_time\
    latest(Search_Activity.Internal_Scheduler.alert_actions) AS alert_actions\
    latest(Search_Activity.Internal_Scheduler.event_message) AS event_message

[rename_gmc_internal_fields]
description = Renames GMC Internal Data Model Fields to human-readable format
definition = eval `gmc_time_format(scheduled_time)` , `gmc_time_format(dispatch_time)` , `gmc_time_format(_time)`\
| rename _time AS "Search Time"\
alert_actions AS "Alert Actions"\
concurrency_category AS "Concurrency Category"\
concurrency_context AS "Concurrency Context"\
concurrency_limit AS "Concurrency Limit"\
datamodel AS "Datamodel"\
priority AS "Schedule Priority"\
reason AS "Reason"\
result_count AS "Result Count"\
scheduled_time AS "Scheduled Time"\
skipped_count AS "Skipped Count"\
total_run_time AS "Runtime in Sec"\
'total_run_time' AS "Runtime"\
Memory_Threshold AS "Memory Threshold"\
Memory_Usage AS "Memory Usage"\
dispatch_time AS "Dispatch Time"\
search_id_normalized AS search_id_normalized\
app AS "App"\
search_type AS "Search Type"\
info AS "Status"\
host As "Splunk Instance"\
user AS User

[rename_job_activity_fields]
description = Renames Job Activity Fields retrieved by get_search_jobs_info
definition = rename error_messages As "Job Error Messages"\
Search_State As "Job Status" \
diskUsage_MB As "Job Disk Usage"
# search_id_normalized  searchEarliestTime searchLatestTime pid app label ttl owner priority provenance delegate diskUsage doneProgress eventAvailableCount eventCount isEventsPreviewEnabled isPreviewEnabled isRemoteTimeline meanPreviewPeriod numPreviews resultCount resultIsStreaming resultPreviewCount runDuration sampleRatio sampleSeed scanCount searchCanBeEventType runtime_auto_cancel runtime_auto_pause error_messages 

[tstats_gmc_audit]
description = Retrieves GMC tstats fields required for Audit
definition = latest(Search_Activity.Audit_Search.available_count) AS available_count\
    latest(Search_Activity.Audit_Search.considered_events) AS considered_events\
    latest(Search_Activity.Audit_Search.datamodel1) AS datamodel\
    latest(Search_Activity.Audit_Search.decompressed_slices) AS decompressed_slices\
    latest(Search_Activity.Audit_Search.event_count) AS event_count\
    latest(Search_Activity.Audit_Search.dispatch_time1) AS dispatch_time\
    latest(Search_Activity.Audit_Search.exec_time) AS exec_time\
    latest(Search_Activity.Audit_Search.result_count1) AS result_count\
    latest(Search_Activity.Audit_Search.roles) AS roles\
    latest(Search_Activity.Audit_Search.savedsearch_name1) AS savedsearch_name\
    latest(Search_Activity.Audit_Search.scan_count1) AS scan_count\
    latest(Search_Activity.Audit_Search.search) AS search\
    latest(Search_Activity.Audit_Search.search_et) AS search_et\
    latest(Search_Activity.Audit_Search.search_lt) AS search_lt\
    latest(Search_Activity.Audit_Search.search_startup_time) AS search_startup_time\
    latest(Search_Activity.Audit_Search.search_type1) AS search_type\
    latest(Search_Activity.Audit_Search.searched_buckets) AS searched_buckets\
    latest(Search_Activity.Audit_Search.total_run_time1) AS total_run_time\
    latest(Search_Activity.Audit_Search.total_slices) AS total_slices\
    latest(Search_Activity.Audit_Search.user1) AS user\
    values(host) as host

[rename_gmc_audit_fields]
description = Renames GMC Audit Data Model Fields to human-readable format
definition = `strftime_format(search_lt)`\
| `strftime_format(search_et)`\
| `strftime_format(dispatch_time)`\
| `strftime_format(_time)`\
| `strftime_format(exec_time)`\
| rename _time AS "Completion Time (_time)"\
'total_run_time' AS "Runtime"\
available_count AS "Available Count"\
considered_events AS "Considered Events"\
datamodel AS "Datamodel"\
decompressed_slices AS "Decompressed Slices"\
event_count AS "Event Count"\
result_count AS "Result Count"\
scan_count AS "Scan Count"\
search_et AS "Search ET"\
search_lt AS "Search LT"\
searched_buckets AS "Searched Buckets"\
Time_Diff AS "Time Difference"\
total_run_time AS "Runtime in Sec"\
total_slices AS "Total Slices"\
dispatch_time AS "Dispatch Time"\
search_id_normalized AS search_id_normalized\
app AS "App"\
search_type AS "Search Type"\
info AS "Status"\
host As "Splunk Instance"\
user AS User

[get_normalized_search_id(1)]
description = Normalize Search ID for the Splunk - SH - 04 - Audit Search Activity - Dashboard
args = search_id
definition = rex field=$search_id$ "_(?<search_id_normalized1>\d+[._]\d+)_" \
| rex field=$search_id$ "(?<search_id_normalized2>\d+[._]\d+$)" \
| rex field=$search_id$ "(?<search_id_normalized3>^\d+[._]\d+)" \
| eval search_id_normalized=if(isnull(search_id_normalized1),search_id_normalized2,search_id_normalized1) \
| eval search_id_normalized=if(isnull(search_id_normalized),search_id_normalized3,search_id_normalized) \
| eval search_id_normalized=if(isnull(search_id_normalized),search_id,search_id_normalized)\
| rex field=search_id_normalized mode=sed "s/\./_/g"\
`gmc_comment("| rex field=search_id_normalized mode=sed "s/^\w+;\w+;//g"")`\
| rex field=search_id_normalized mode=sed "s/^\w+;.*;|^_ACCELERATE_DM_|^_ACCELERATE_|_ACCELERATE_$//g"\
| fields - search_id_normalized1,search_id_normalized2,search_id_normalized3

[get_memory_tracker_fields]
description = Extracts Memory Tracker Fields
definition = rex field=event_message "physical\smemory\susage\s\((?<Memory_Usage>.*?)(percent|MB)"\
| rex field=event_message "exceeded\sthe\s'(?<Memory_Threshold>.*?)\'"

[get_datamodel_fields(1)]
description = Extracts Datamodel from Savedsearch Name field
args = field
definition = rex field=$field$ "_ACCELERATE_DM_(?<app>.*?)_" \
| eval $field$ = case(match($field$, "_ACCELERATE_|^search\d+"), null(), true(), $field$) \
| rex field=savedsearch_id "(?<DM_User>^.*?);(?<DM_App>.*?);_ACCELERATE_DM_(?<datamodel>.*)_ACCELERATE_$"

[gmc_comment(1)]
description = Comments out sections in search
args = text
definition = ""
iseval = 1

[get_cron_schedule(1)]
description = Converts Cron Schedule to human-readable format
args = cron_schedule
definition = lookup cron_schedule_map_csv_lookup $cron_schedule$ OUTPUTNEW cron_schedule_described\
| eval cron_schedule_described = if(isnull(cron_schedule_described) AND isnotnull($cron_schedule$), "no-desc-found", cron_schedule_described)

[cron_descriptor(1)]
description = Converts Cron Schedule to human-readable format via Python Lookup
args = cron_schedule
definition = eval $cron_schedule$ = if(isnull($cron_schedule$) OR $cron_schedule$="", null(), $cron_schedule$) \
| lookup cron_descriptor cron_expression As $cron_schedule$ OUTPUT cron_human_readable As cron_schedule_described \
| eval cron_schedule_described = if(isnull(cron_schedule_described) AND isnotnull($cron_schedule$), "no-cron-desc-found", cron_schedule_described)

[get_idxcluster_label_guid(1)]
description = Retrieves Splunk Indexer Info including the cluster label from its GUID
args = guid
definition = lookup splunk_rest_cluster_config_idx_kv_store_lookup guid AS $guid$ OUTPUTNEW Splunk_Instance AS Indexer_Name idxcluster_label

[normalize_search_type(1)]
description = Normalize GMC Search Types for Splunk - SH - 04 - Audit Search Activity - Dashboard
args = search_type
definition = eval $search_type$ = case (\
    $search_type$ = "adhoc", "Ad-Hoc", \
    $search_type$ = "datamodel_acceleration", "Datamodel Acceleration", \
    $search_type$ = "report_acceleration", "Report Acceleration", \
    $search_type$ = "scheduled", "Scheduled Jobs", \
    $search_type$ = "summary_indexing", "Summary Indexing", \
    $search_type$ = "realtime", "Real-Time", \
    $search_type$ = "subsearch", "Subsearch", \
    $search_type$ = "typeahead", "Typeahead", \
    true(), $search_type$)

[rename_common_fields]
description = Renames GMC Data Model Common Fields to human-readable format
definition = rename\
Splunk_Instance AS "Splunk Instance"\
Splunk_Roles AS "Splunk Roles"\
cluster_label AS "Cluster Label"\
shcluster_label AS "SH Cluster Label"\
idxcluster_label AS "IDX Cluster Label"

[get_instance_roles(1)]
description = Retrieves Splunk Instance Role Information
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_assets_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW Splunk_Roles\
| eval  Splunk_Roles = If(IsNull(Splunk_Roles) OR Splunk_Roles="", "No-Splunk_Roles", Splunk_Roles)\
| eval  Splunk_Instance = If(IsNull(Splunk_Instance) OR Splunk_Instance="", "No-Splunk_Instance", Splunk_Instance)\
| fillnull value="no-role-info" Splunk_Roles

[rename_rest_fields]
description = Renames Common REST Fields to human-readable format
definition = rename \
    app AS "App"\
    sharing AS "App Sharing" \
    author AS Owner\
    updated AS "Update Time"\
    stanza AS "Stanza"\
    description AS Description\
    disabled AS Disabled

[get_shcluster_label(1)]
description = Retrieves Search Head Cluster Label
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_shcluster_config_shc_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW shcluster_label\
| eval  shcluster_label = If(IsNull(shcluster_label) OR Splunk_Instance="No-Splunk_Instance", "No-shcluster_label", shcluster_label)

[get_idxcluster_label(1)]
description = Retrieves Indexer Cluster Label
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$)\
| lookup splunk_rest_cluster_config_idx_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW idxcluster_label\
| eval  idxcluster_label = If(IsNull(idxcluster_label) OR Splunk_Instance="No-Splunk_Instance", "No-idxcluster_label", mvdedup(idxcluster_label))

[get_dmc_assets_info(1)]
description = Retrieves All Custom Search Groups from the Monitoring Console dmc_assets Lookup Table
args = Splunk_Instance
definition = eval $Splunk_Instance$=upper($Splunk_Instance$)\
| lookup dmc_assets host AS $Splunk_Instance$ OUTPUTNEW search_group\
| eval $Splunk_Instance$=lower($Splunk_Instance$)

[gmc_byte2mb(1)]
description = Converts Bytes to MB
args = field
definition = eval $field$_MB=round($field$/1024/1024,3)

[gmc_byte2gb(1)]
description = Converts Bytes to GB
args = field
definition = eval $field$_GB=round($field$/1024/1024/1024,3)

[gmc_byte2tb(1)]
description = Converts Bytes to TB
args = field
definition = eval $field$_TB=round($field$/1024/1024/1024/1024,3)

[gmc_mb2gb(1)]
description = Converts MB to GB
args = field
definition = eval $field$_GB=round($field$/1024,3)

[gmc_mb2tb(1)]
description = Converts MB to TB
args = field
definition = eval $field$_TB=round($field$/1024/1024,3)

[get_latest_access_human(1)]
description = Converts User Access Time from epoch time to human-readable format
args = Days_Latest_Access
definition = eval Days_Latest_Access_Display = case (\
    $Days_Latest_Access$ = "0", "Today",\
    $Days_Latest_Access$ = "1", "Yesterday",\
    $Days_Latest_Access$ = "9999999", "Never",\
    true(), $Days_Latest_Access$ . " Days Ago" )

[rename_indexes_fields]
description = Renames Splunk Indexes REST Fields to human-readable format
definition = rename \
    currentDBSize_MB AS "Index Size (MB)" \
    currentDBSize_GB AS "Index Size (GB)" \
    currentDBSize_TB AS "Index Size (TB)" \
    homePath_maxDataSize_MB AS "Max Hot/Warm Size (MB)" \
    homePath_maxDataSize_GB AS "Max Hot/Warm Size (GB)" \
    homePath_maxDataSize_TB AS "Max Hot/Warm Size (TB)" \
    coldPath_maxDataSize_MB AS "Max Cold Size (MB)" \
    coldPath_maxDataSize_GB AS "Max Cold Size (GB)" \
    coldPath_maxDataSize_TB AS "Max Cold Size (TB)" \
    cold_bucket_size_MB AS "Cold Bucket Size (MB)" \
    cold_bucket_size_GB AS "Cold Bucket Size (GB)" \
    cold_bucket_size_TB AS "Cold Bucket Size (TB)" \
    home_warm_bucket_size_MB AS "Warm Bucket Size (MB)" \
    home_warm_bucket_size_GB AS "Warm Bucket Size (GB)" \
    home_warm_bucket_size_TB AS "Warm Bucket Size (TB)" \
    total_bucket_count_avg AS "Avg Bucket Count" \
    app AS "App" \
    datatype AS "Data Type" \
    datamodel_summary_size_MB AS "Data Model Summary Size (MB)" \
    datamodel_summary_size_GB AS "Data Model Summary Size (GB)" \
    datamodel_summary_size_TB AS "Data Model Summary Size (TB)" \
    idxcluster_label AS "IDX Cluster" \
    Index_Name AS "Index" \
    Retention_Days AS "Retention IN Days" \
    maxDataSize AS "Max Size of Hot/Warm/Cold Buckets (MB)" \
    HotWarm_Volume AS "Hot/Warm Volume" \
    Cold_Volume AS "Cold Volume" \
    Time_Diff_Days AS "Time Diff IN Days"\
    Days_Diff_From_Retention AS "Days Diff From Retention" \
    maxHotBuckets AS "Max Hot Buckets" \
    maxWarmDBCount AS "Max Warm DB Count" \
    total_bucket_count AS "Average Bucket Count" \
    totalEventCount AS "Average Event Count" \
    maxHotSpanSecs AS "Hot/Warm Bucket Retention IN Days" \
    Num_Splunk_Instances AS "# of Indexers" \
    disabled AS "Disabled" \
    enableRealtimeSearch As "Real-time Searches" \
    updated AS "Index Update Time" \
    total_raw_size As "Total Raw Size" \
    total_bucket_count As "Total Bucket Count" \
    home_hot_bucket_count As "Total Hot Bucket Count" \
    home_warm_bucket_count As "Home and Warm Bucket Count" \
    cold_bucket_count As "Cold Bucket Count" \
    cold_event_count As "Cold Event Count" \
    home_event_count As "Home Event Count" \
    total_event_count As "Total Event Count" \
    maxHotIdleSecs As "Max Hot Bucket Life"

[secs_2_days(2)]
description = Converts Seconds to Days Simple
args = inField,outField
definition = eval $outField$ = ($inField$/86400)

[gmc_byte2human(2)]
description = Converts Bytes to human-readable format
args = field,rounding
definition = eval \
    $field$_MB = Round ($field$/1024/1024, $rounding$), \
    $field$_GB = Round ($field$/1024/1024/1024, $rounding$), \
    $field$_TB = Round ($field$/1024/1024/1024/1024, $rounding$)

[gmc_mb2human(2)]
description = Converts MB to human-readable format
args = field,rounding
definition = eval \
    $field$_GB = Round ($field$/1024, $rounding$), \
    $field$_TB = Round ($field$/1024/1024, $rounding$)

[get_splunk_roles_info(2)]
description = Retrieves Splunk Authentication Role Mappings
args = shcluster_label,title
definition = lookup splunk_rest_authorization_roles_sh_kv_store_lookup shcluster_label AS $shcluster_label$ title AS $title$ OUTPUTNEW cumulativeRTSrchJobsQuota,capabilities,imported_capabilities,cumulativeSrchJobsQuota,defaultApp,deleteIndexesAllowed,federatedProviders,grantable_roles,imported_roles,imported_rtSrchJobsQuota,imported_srchDiskQuota,imported_srchFilter,imported_srchIndexesAllowed,imported_srchIndexesDefault,imported_srchJobsQuota,imported_srchTimeWin,rtSrchJobsQuota,srchDiskQuota,srchFilter,srchIndexesAllowed,srchIndexesDefault,srchJobsQuota,srchTimeWin\
| fillnull value="get_splunk_roles_info" splunk_role_map\
| foreach * [ eval <<FIELD>>=mvdedup('<<FIELD>>')]\
| fillnull value="no-role-info" Splunk_Roles

[rename_splunk_roles_fields]
description = Renames Splunk Authentication Roles REST Fields to human-readable format
definition = rename \
    capabilities As "Role-level Capabilities"\
    cumulativeRTSrchJobsQuota As "Role-level Concurrent RT Search job limit (cumulativeRTSrchJobsQuota)"\
    cumulativeSrchJobsQuota As "Role-level Concurrent Search job limit (cumulativeSrchJobsQuota)"\
    defaultApp As "Default App"\
    deleteIndexesAllowed As "Delete Indexes Allowed"\
    federatedProviders As "Role Federated Providers"\
    grantable_roles As "Grantable Roles (grantable_roles)"\
    imported_capabilities As "Inherited Capabilities (imported_capabilities)"\
    imported_roles As "Inherited Roles (imported_roles)"\
    imported_rtSrchJobsQuota As "Inherited User-level Concurrent RT Search job limit (imported_rtSrchJobsQuota)"\
    imported_srchDiskQuota As "Inherited Total Search job disk quota (imported_srchDiskQuota)"\
    imported_srchFilter As "Inherited Restrictions for Search terms"\
    imported_srchIndexesAllowed As "Inherited Allowed Indexes List"\
    imported_srchIndexesDefault As "Inherited Indexes Searched By Default"\
    imported_srchJobsQuota As "Inherited User-level Concurrent search job limit (imported_srchJobsQuota)"\
    imported_srchTimeWin As "Inherited Restrictions for Search time range"\
    rtSrchJobsQuota As "User-level Concurrent RT Search job limit (rtSrchJobsQuota)"\
    srchDiskQuota As "Total Search job disk quota (srchDiskQuota)"\
    srchFilter As "Restricted Search terms (srchFilter)"\
    srchIndexesAllowed As "Allowed Indexes List (srchIndexesAllowed)"\
    srchIndexesDefault As "Indexes Searched By Default (srchIndexesDefault)"\
    srchJobsQuota As "User-level Concurrent search job limit (srchJobsQuota)"\
    srchTimeWin As "Restrict Search time range (srchTimeWin)"\
    title As "Role Name"

[get_sourcetype_info(1)]
description = Retrieves Source Type Information from Source Type Name
args = title
definition = lookup splunk_rest_configs_conf_props_sh_kv_store_lookup title As $title$ OUTPUTNEW app sharing author TIME_PREFIX TIME_FORMAT MAX_TIMESTAMP_LOOKAHEAD DATETIME_CONFIG SHOULD_LINEMERGE LINE_BREAKER TRUNCATE BREAK_ONLY_BEFORE BREAK_ONLY_BEFORE_DATE MUST_BREAK_AFTER KV_MODE INDEXED_EXTRACTIONS EVENT_BREAKER_ENABLE EVENT_BREAKER ANNOTATE_PUNCT LEARN_SOURCETYPE LEARN_MODEL MAX_EVENTS maxDist updated ADD_EXTRA_TIME_FIELDS AUTO_KV_JSON CHARSET CHECK_FOR_HEADER CHECK_METHOD DEPTH_LIMIT FIELD_DELIMITER FIELD_HEADER_REGEX HEADER_FIELD_DELIMITER HEADER_MODE JSON_TRIM_BRACES_IN_ARRAY_NAMES LINE_BREAKER_LOOKBEHIND MATCH_LIMIT MAX_DAYS_AGO MAX_DAYS_HENCE MAX_DIFF_SECS_AGO MAX_DIFF_SECS_HENCE METRIC-SCHEMA-TRANSFORMS METRICS_PROTOCOL MUST_NOT_BREAK_AFTER MUST_NOT_BREAK_BEFORE NO_BINARY_CHECK PREFIX_SOURCETYPE TIMESTAMP_FIELDS TRANSFORMS TZ category disabled invalid_cause is_valid priority pulldown_type rename \
| convert ctime(*Time), ctime(updated) \
| fillnull value="auto" KV_MODE \
| fillnull value="128" MAX_TIMESTAMP_LOOKAHEAD \
| fillnull value="300" maxDist \
| fillnull value="256" MAX_EVENTS \
| fillnull value="0" EVENT_BREAKER_ENABLE \
| fillnull value="1" ANNOTATE_PUNCT LEARN_MODEL SHOULD_LINEMERGE LEARN_SOURCETYPE BREAK_ONLY_BEFORE_DATE \
| fillnull value="10000" TRUNCATE \
| fillnull value="^" TIME_PREFIX \
| fillnull value="([\r\n]+)" LINE_BREAKER \
| fillnull value="\r\n" EVENT_BREAKER \
| fillnull value="/etc/datetime.xml" DATETIME_CONFIG \
| fillnull value="not-set" INDEXED_EXTRACTIONS

[get_sourcetype_info(2)]
description = Retrieves Source Type Information from the Search Head Cluster Label and the Source Type Name
args = shcluster_label,title
definition = lookup splunk_rest_configs_conf_props_sh_kv_store_lookup shcluster_label As $shcluster_label$ title As $title$ OUTPUTNEW app sharing author TIME_PREFIX TIME_FORMAT MAX_TIMESTAMP_LOOKAHEAD DATETIME_CONFIG SHOULD_LINEMERGE LINE_BREAKER TRUNCATE BREAK_ONLY_BEFORE BREAK_ONLY_BEFORE_DATE MUST_BREAK_AFTER KV_MODE INDEXED_EXTRACTIONS EVENT_BREAKER_ENABLE EVENT_BREAKER ANNOTATE_PUNCT LEARN_SOURCETYPE LEARN_MODEL MAX_EVENTS maxDist updated ADD_EXTRA_TIME_FIELDS AUTO_KV_JSON CHARSET CHECK_FOR_HEADER CHECK_METHOD DEPTH_LIMIT FIELD_DELIMITER FIELD_HEADER_REGEX HEADER_FIELD_DELIMITER HEADER_MODE JSON_TRIM_BRACES_IN_ARRAY_NAMES LINE_BREAKER_LOOKBEHIND MATCH_LIMIT MAX_DAYS_AGO MAX_DAYS_HENCE MAX_DIFF_SECS_AGO MAX_DIFF_SECS_HENCE METRIC-SCHEMA-TRANSFORMS METRICS_PROTOCOL MUST_NOT_BREAK_AFTER MUST_NOT_BREAK_BEFORE NO_BINARY_CHECK PREFIX_SOURCETYPE TIMESTAMP_FIELDS TRANSFORMS TZ category disabled invalid_cause is_valid priority pulldown_type rename \
| convert ctime(*Time), ctime(updated) \
| fillnull value="auto" KV_MODE \
| fillnull value="128" MAX_TIMESTAMP_LOOKAHEAD \
| fillnull value="300" maxDist \
| fillnull value="256" MAX_EVENTS \
| fillnull value="0" EVENT_BREAKER_ENABLE \
| fillnull value="1" ANNOTATE_PUNCT LEARN_MODEL SHOULD_LINEMERGE LEARN_SOURCETYPE BREAK_ONLY_BEFORE_DATE \
| fillnull value="10000" TRUNCATE \
| fillnull value="^" TIME_PREFIX \
| fillnull value="([\r\n]+)" LINE_BREAKER \
| fillnull value="\r\n" EVENT_BREAKER \
| fillnull value="/etc/datetime.xml" DATETIME_CONFIG \
| fillnull value="not-set" INDEXED_EXTRACTIONS

[get_itsi_service_info(3)]
description = Retrieves ITSI Interface Service Information
args = shcluster_label,service_id,kpi_id
definition = lookup splunk_rest_itsi_service_sh_kv_store_lookup shcluster_label As $shcluster_label$ service_id As $service_id$ kpi_id As $kpi_id$ OUTPUTNEW service_title kpi_title

[get_itsi_search_name_info(2)]
description = Retrieves ITSI Base Search Information
args = shcluster_label,search_name
definition = lookup splunk_index_itsi_summary_sh_kv_store_lookup shcluster_label As $shcluster_label$ search_name As $search_name$ OUTPUTNEW serviceid As service_id kpiid As kpi_id

[get_itsi_kpi_base_search_info(2)]
description = Retrieves ITSI KPI Base Search Information.  Usage: | `get_itsi_kpi_base_search_info(shcluster_label,base_search_id)`
args = shcluster_label,base_search_id
definition = lookup splunk_rest_itsi_kpi_base_search_sh_kv_store_lookup shcluster_label As $shcluster_label$ key As $base_search_id$ OUTPUTNEW title base_search

[set_geo_defaults]
description = Configures Identity Default Geographic Information
definition = eval \
    emp_city = if(isnull(emp_city), `setup_city_geo`, emp_city),\
    emp_region1=if(isnull(emp_region1), `setup_region_geo`, emp_region1),\
    emp_country = if(isnull(emp_country), `setup_country_geo`, emp_country)

[gmc_categorize_cron_schedule(1)]
description = Retrieve Cron Schedule Categories
args = cron_schedule
definition = eval tmp_sched=$cron_schedule$ \
| rex mode=sed field=tmp_sched "s/\*/x/g" \
| rex field=tmp_sched "(?<minute>\S+)\s+(?<hour>\S+)\s+(?<domonth>\S+)\s+(?<month>\S+)\s+(?<doweek>\S+)" \
| eval category=case( searchmatch("minute=x"), "every minute", \
    searchmatch("minute=x/1"), "every minute", \
    searchmatch("minute=x/*"), "every n minutes", \
    match(minute, "^[0-9]+$") AND match(hour, "^[0-9]+$"), "daily", \
    match(minute, "^[0-9]+$") AND searchmatch("hour=x"), "hourly", \
    match(minute,"^[0-9]+$") AND searchmatch("hour=*,* OR hour=*-*"),"hourly on specific hours" \
 ) \
| rex field=minute "x\/(?<nth_minute>\d+)" \
| eval category=if(searchmatch("category=\"every n minutes\"") AND isnotnull(nth_minute), "every ". nth_minute ." minutes", category) \
| fillnull value="uncategorized" category

[gmc_license_to_lob(2)]
description = Retrieve Business License Information
args = idxcluster_label,index
definition = lookup splunk_ingest_by_bu_idx_kv_store_lookup idxcluster_label As $idxcluster_label$ index As $index$ OUTPUTNEW biz_unit,biz_desc,biz_owner,biz_app,biz_dep,biz_lob,biz_lob2,biz_lob3,biz_env,biz_notes,biz_lic_commit,is_shared_infra \
| fillnull value="No-Biz-Data" biz_unit,biz_desc,biz_owner,biz_app,biz_dep,biz_lob,biz_lob2,biz_lob3,biz_env,biz_notes,biz_lic_commit,is_shared_infra

[rename_license_lob_fields]
description = Renames GMC Index Usage by LOB
definition = rename \
    biz_unit AS "Business Unit" \
    biz_desc AS "Business Description" \
    biz_owner AS "Business Owner" \
    biz_app AS "Business Application" \
    biz_dep AS "Business Department" \
    biz_lob AS "Business LOB" \
    biz_lob2 AS "Business Sub-LOB2" \
    biz_lob3 AS "Business Sub-LOB3" \
    biz_env AS "Business Environment" \
    biz_notes AS "Business Notes" \
    biz_lic_commit AS "Business License Commitment" \
    is_shared_infra As "Shared Infrastructure?"

[get_ko_changes(4)]
description = Retrieves Knowledge Objects Changes from the GMC Summary Index (splunk_internal_splunkd_ui_access_ko_changes_idx_summary_tracker) \
Example: | from lookup:splunk_rest_data_ui_views_sh_kv_store_lookup | fields shcluster_label,Splunk_Instance,app,sharing,title
args = shcluster_label,Knowledge_Object_Type,Join_Field,Num_Days
definition = join $shcluster_label$ $Join_Field$ \
  [ | search index=`setup_summary_index` search_name="splunk_internal_splunkd_ui_access_ko_changes_idx_summary_tracker" Knowledge_Object_Type="$Knowledge_Object_Type$" earliest=-$Num_Days$d@d \
    | fields _time shcluster_label Splunk_Instance User Client_IP Knowledge_Object_Type Knowledge_Object Change_Status Duration Change_Time \
    | stats \
        Values(Splunk_Instance) As Splunk_Instance \
        Latest(*) As * \
        Latest(Change_Time) As Change_Time \
        By shcluster_label User Knowledge_Object_Type Knowledge_Object \
    | rename Knowledge_Object As $Join_Field$] \
| `strftime_format(Change_Time)` \
| fields shcluster_label Knowledge_Object_Type $Join_Field$ User Change_Time


[get_savedsearch_changes(4)]
description = Retrieves Exactly what changed in a Report/Alert. Powered by the GMC Summary Index (splunk_rest_saved_searches_sh_summary_tracker) \
Example: 
args = shcluster_label,app,savedsearch_name,Num_Days
definition = join $shcluster_label$ $app$ $savedsearch_name$ \
    [ search index=`setup_summary_index` search_name="splunk_rest_saved_searches_sh_summary_tracker" earliest=-$Num_Days$d@d \
    | fields _time search_name Splunk_Instance author app savedsearch_name Change_Time Latest_Change_Sec is_scheduled disabled cron_schedule realtime_schedule schedule_priority schedule_window allow_skew acl_perms_read acl_perms_write correlationsearch_enabled savedsearch_search \
    | `get_shcluster_label(Splunk_Instance)` \
    | stats Values(Splunk_Instance) As Splunk_Instance Latest(*) As * Latest(Change_Time) As Change_Time By shcluster_label app savedsearch_name ] \
    | `strftime_format(Change_Time)` \
    | fields shcluster_label app author savedsearch_name Change_Time is_scheduled disabled cron_schedule realtime_schedule schedule_priority schedule_window allow_skew acl_perms_read acl_perms_write correlationsearch_enabled savedsearch_search

[update_value(3)]
description = Change Value \
Example:
args = field_name,old_value,new_value
definition = eval $field_name$=if($field_name$="$old_value$", "$new_value$", $field_name$)

#[get_summary_data_from_ko(1)]
#description = 123
#args = Knowledge_Object_Type
#definition = eval search_name = case ( \
#        $Knowledge_Object_Type$="Reports_Alerts", "splunk_rest_saved_searches_sh_summary_data", \
#        $Knowledge_Object_Type$="Data_Models", "splunk_rest_data_models_sh_summary_data", \
#        $Knowledge_Object_Type$="Event_Types", "splunk_rest_admin_eventtypes_sh_summary_data", \
#        $Knowledge_Object_Type$="Field_Aliases", "splunk_rest_data_props_fieldaliases_sh_summary_data", \
#        $Knowledge_Object_Type$="Calculated_Fields", "splunk_rest_data_props_calcfields_sh_summary_data", \ 
#        $Knowledge_Object_Type$="Field_Extractions", "splunk_rest_data_props_extractions_sh_summary_data", \
#        $Knowledge_Object_Type$="Field_Transformations", "splunk_rest_data_transforms_extractions_sh_summary_data", \
#        $Knowledge_Object_Type$="Lookup_Table_Files", "splunk_rest_admin_lookup_table_files_sh_summary_data", \
#        $Knowledge_Object_Type$="Lookup_Definitions", "splunk_rest_admin_transforms_lookup_sh_summary_data", \
#        $Knowledge_Object_Type$="Automatic_Lookups", "splunk_rest_data_props_lookups_sh_summary_data", \
#        $Knowledge_Object_Type$="Dashboards", "splunk_rest_data_ui_views_sh_summary_data", \
#        $Knowledge_Object_Type$="Macros", "splunk_rest_data_macros_sh_summary_data", \
#        $Knowledge_Object_Type$="Sourcetypes", "splunk_rest_configs_conf_props_sh_summary_data", \
#        true(), search_name)

[normalize_earliest_time(1)]
description = Normalize Scheduler Jobs Earliest Time to Humanly Readable
args = earliest_time
definition = eval dispatch_earliest_time_normalized = case ( \
    match(dispatch_$earliest_time$, "mon") OR match(savedsearch_search, "earliest=-\d+?mon"), "Month_Interval", \
    match(dispatch_$earliest_time$, "w") OR match(savedsearch_search, "earliest=-\d+?w"), "Week_Interval", \
    match(dispatch_$earliest_time$, "-1d@d|-1d|-24h|24h@h|-1day") OR dispatch_$earliest_time$="@d" , "1_Day_Interval", \
    match(dispatch_$earliest_time$, "d") OR match(savedsearch_search, "earliest=-\d+?d"), "N_Day_Interval", \
    match(dispatch_$earliest_time$, "h") OR match(savedsearch_search, "earliest=-\d+?h"), "Hour_Interval", \
    match(dispatch_$earliest_time$, "m") OR match(savedsearch_search, "earliest=-\d+?m"), "Minute_Interval", \
    (match(dispatch_$earliest_time$, "s") OR match(savedsearch_search, "earliest=-\d+?s")) AND ! match(savedsearch_search, "earliest=-\d+?[mhdy]"), "Second_Interval", \
    dispatch_$earliest_time$ = "0" OR dispatch_$earliest_time$ = "1" OR match(savedsearch_search, "earliest=-?0|earliest=-?1"), "All-Time", \
    match(dispatch_$earliest_time$,"^\d+") AND len(dispatch_$earliest_time$) = 10, strftime(dispatch_$earliest_time$,"%m/%d/%Y %I:%M:%S"), \
    match(dispatch_$earliest_time$, "y") OR match(savedsearch_search, "earliest=-\d+?y"), "Year_Interval", \
    true(), "Other") 

[get_cluster_label(1)]
description = Retrieves Splunk Search Head Cluster & IDX Cluster Label Names
args = Splunk_Instance
definition = eval $Splunk_Instance$=lower($Splunk_Instance$) \
| lookup splunk_rest_shcluster_config_shc_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW shcluster_label \
| lookup splunk_rest_cluster_config_idx_kv_store_lookup Splunk_Instance AS $Splunk_Instance$ OUTPUTNEW idxcluster_label \
| eval cluster_label = mvappend(shcluster_label,idxcluster_label)

[get_sbase_app_info(1)]
description = Retrieves Splunkbase App information
args = app
definition = lookup splunk_base_apps_kv_store_lookup appid As $app$ OUTPUTNEW uid latest_version uid title As sbase_title latest_version type access appinspected archive_status categories created_by overview details path updated_time support product_compatibility splunk_compatibility release_notes\
| `strftime_format(updated_time)` 

[btool_multikv]
definition =  multikv noheader=t | rex "(?<SPLUNK_HOME>.*?)/etc/(?<app_folder>apps|master-apps|system|slave-apps)/((?<app>.*)/)?(?<directory>default|local)/(?<file>\w+\.conf)"
iseval = 0

[setup_get_dmc_assets_info]
description = Retrieves All Custom Search Groups from the Monitoring Console dmc_assets Lookup Table, in Cloud replace with noop
definition = `get_dmc_assets_info(Splunk_Instance)`

[setup_summary_index]
description = Configures GMC Summary Index Note: Create this index now before proceeding
definition = summary

[setup_gmc_search]
description = Configures GMC Instance Name
definition = GMC

[setup_dm_constraints_search]
description = Configures Limit what the GMC Data Model Accelerated Against, On-Prem customers use search_group=dmc_group_search_head, Cloud customers use: host IN (sh-i-*, c0m1-i-*, idm-i-*) NOT user IN ("int_*", "splunk-system-user", "internal_monitoring", "app-installer", "cmon_user", "index-manager", "internal_automation", "internal_ops_admin", "system"). To get search information from the indexer tier.
definition = search_group=dmc_group_search_head

[setup_license_master_search]
description = Configures License Master Instance Name for Search
definition = search_group=dmc_group_license_master

[setup_cluster_master_search]
description = Configures Cluster Master Instance Name for Search
definition = search_group=dmc_group_cluster_master

[setup_cluster_master_rest]
description = Configures Cluster Master Group for REST
definition = splunk_server_group=dmc_group_cluster_master

[setup_shc_search]
description = Configures Search Head Cluster Instance Name for Search
definition = search_group=dmc_searchheadclustergroup_*

[setup_shc_rest]
description = Configures Search Head Cluster Group for REST
definition = splunk_server_group=dmc_searchheadclustergroup_*

[setup_indexer_search]
description = GMC Indexers Group for Search
definition = search_group=dmc_group_indexer

[setup_group_indexer_rest]
description = Configures GMC Indexers Group for REST
definition = splunk_server_group=dmc_group_indexer

[setup_idm_rest]
description = Configures GMC Input Data Manager (IDM) Group for REST
definition = splunk_server_group=idm-i-*

[setup_search_head_search]
description = Configures GMC Search Heads Group for Search
definition = search_group=dmc_group_search_head

[setup_group_search_head_rest]
description = Configures GMC Search Heads Group for REST
definition = splunk_server_group=dmc_group_search_head

[setup_itsi_search_head_rest]
description = Configures Splunk IT Service Intelligence Search Head Instance Name
definition = ITSI

[setup_es_search_head_rest]
description = Configures Splunk Enterprise Security Search Head Instance Name
definition = ES

[setup_group_all_servers_rest]
description = Configures GMC All Splunk Instances for REST
definition = splunk_server_group=*

[setup_city_geo]
description = Configures Headquarters City Name Default for Identities
definition = "San Francisco"

[setup_region_geo]
description = Configures Headquarters Region/State Name Default for Identities
definition = "CA"

[setup_country_geo]
description = Configures Headquarters Country Name Default for Identities
definition = "United States"

[setup_emp_type]
description = Configures Default Employee Type for Identities
definition = "no-emp-info"

[setup_emp_status]
description = Configures Default Employee Status for Identities
definition = "no-emp-info"

[setup_emp_loc]
description = Configures Default Employee Location for Identities
definition = "SFO"
